{
  "hash": "54b0a3818dc3dfb40129ae2b9c77bbae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shiny Cumulative Return Plot\"\noutput: \n  html_document:\n    self_contained: true\nruntime: shiny\n---\n\n::: {.cell context='server'}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dplyr' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggplot2' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggthemes)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggthemes' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(PerformanceAnalytics)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'PerformanceAnalytics' was built under R version 4.2.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCarregando pacotes exigidos: xts\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'xts' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCarregando pacotes exigidos: zoo\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'zoo' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'zoo'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'xts'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:dplyr':\n\n    first, last\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'PerformanceAnalytics'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:graphics':\n\n    legend\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'plotly' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'plotly'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'readxl' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(shiny)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'shiny' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Shiny UI and Server functions\nui <- fluidPage(\n  titlePanel(\"Cumulative Returns of Ibov and Selic\"),\n  sidebarLayout(\n    sidebarPanel(\n      helpText(\"Select the date range for analysis\"),\n      \n      # Date inputs for start and end date\n      dateInput(\"start_date\", \"Start Date:\",\n                value = '1995-01-01', format = \"yyyy-mm-dd\"),\n      \n      dateInput(\"end_date\", \"End Date:\",\n                value = Sys.Date(), format = \"yyyy-mm-dd\")\n    ),\n    mainPanel(\n      plotlyOutput(\"cumulative_plot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  output$cumulative_plot <- renderPlotly({\n    # Define the user-selected start and end dates\n    start <- input$start_date\n    end <- input$end_date\n    \n    # Download Ibov data based on selected dates\n    stock <- '^BVSP'\n    ibov <- yf_get(tickers = stock, first_date = start, last_date = end)\n    ibov <- ibov[order(as.numeric(ibov$ref_date)),]\n    ibov$Ibov_return <- ibov$cumret_adjusted_prices - 1\n    \n    # Download Selic data\n    selic <- GetBCBData::gbcbd_get_series(\n      id = 432,\n      first.date = start,\n      last.date = end\n    )\n    names(selic) <- c(\"ref_date\", \"selic\")\n    selic$ref_date <- as.Date(selic$ref_date, format = \"%d/%m/%Y\")\n    selic <- na.omit(selic)\n    selic$selic <- selic$selic / (252 * 100)\n    \n    # Cumulative return Selic\n    return_selic <- data.frame(nrow(selic):1)\n    colnames(return_selic) <- \"selic_return\"\n    for(i in (2:nrow(selic))) {\n      return_selic[i, 1] <- Return.cumulative(selic$selic[1:i])\n    }\n    \n    # Merging dataframes\n    selic <- cbind(selic, return_selic)\n    df <- merge(ibov, selic, by = c(\"ref_date\"))\n    df$selic_return[1] <- NA\n    df$Ibov_return[1] <- NA\n    \n    # Plot the data\n    p <- ggplot(df, aes(ref_date)) +\n      geom_line(aes(y = Ibov_return, colour = \"Ibov\")) +\n      geom_line(aes(y = selic_return, colour = \"Selic\")) +\n      labs(y = 'Cumulative return (daily)') +\n      labs(x = '') +\n      theme_solarized() +\n      ggtitle(\"Cumulative Returns for Ibov and Selic\")\n    \n    ggplotly(p)\n  })\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<iframe data-deferred-src=\"appc9aa2264e6b241c9644c8b1dcbdc9bf1/?w=&amp;__subapp__=1\" width=\"100%\" height=\"400\" class=\"shiny-frame shiny-frame-deferred\"></iframe>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}