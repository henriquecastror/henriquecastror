---
title: "Self-quiz — Module 1"
format:
  html:
    toc: false
    embed-resources: false
    include-before-body: ../login-start.html
    include-after-body:  ../login-end.html
---

```{=html}
<style>
  :root{--ink:#111827;--muted:#6b7280;--line:#e5e7eb;--card:#f8fafc;--brand:#4f46e5}
  .sq-wrap{max-width:880px;margin:0 auto}
  .sq-head{display:flex;justify-content:space-between;align-items:center;gap:12px}
  .sq-muted{color:var(--muted);font-size:14px}
  .sq-card{background:var(--card);border:1px solid var(--line);border-radius:12px;padding:16px;margin:12px 0}
  .sq-qnum{font-weight:600;margin-bottom:6px}
  .sq-stem{margin:8px 0 10px}
  .sq-opt{display:flex;gap:10px;align-items:flex-start;border:1px solid var(--line);border-radius:10px;padding:10px;margin:8px 0;cursor:pointer}
  .sq-opt input{margin-top:3px}
  .sq-actions{display:flex;gap:10px;align-items:center;margin-top:16px}
  .sq-btn{padding:10px 14px;border-radius:10px;border:1px solid var(--line);cursor:pointer;background:#fff}
  .sq-btn.primary{background:var(--brand);border-color:var(--brand);color:#fff}
  .sq-pill{padding:6px 10px;border:1px solid var(--line);border-radius:999px;background:#eef2ff;font-size:12px}
  .sq-timer{font-variant-numeric:tabular-nums}
  .sq-warn{background:#fff7ed;border:1px solid #fed7aa;color:#9a3412;padding:10px;border-radius:10px;margin:10px 0}
  .sq-err{background:#fef2f2;border:1px solid #fecaca;color:#991b1b;padding:10px;border-radius:10px;margin:10px 0}
  .sq-ok{background:#ecfdf5;border:1px solid #bbf7d0;color:#065f46;padding:10px;border-radius:10px;margin:10px 0}
</style>


<div class="sq-wrap">
  <header class="sq-head">
    <div>
      <h2 style="margin:0">Self-quiz</h2>
      <div class="sq-muted" id="sq-subtitle">Preparing…</div>
    </div>
    <div class="sq-pill sq-timer" id="sq-timer">--:--</div>
  </header>

  <div id="sq-alerts"></div>
  <div id="sq-quiz"></div>

  <div class="sq-actions">
    <button id="sq-submit" class="sq-btn primary" disabled>Submit answers</button>
    <button id="sq-save" class="sq-btn" disabled>Save draft</button>
    <span class="sq-muted" id="sq-status"></span>
  </div>
</div>

<script>
(function(){
  // ========= Config =========
  const API_BASE        = (window.SELFQUIZ_API_BASE || "https://course-chat.hcmrtns.workers.dev").replace(/\/+$/,'');
  const DEFAULT_TRACK   = "module";    // "module" (prática)
  const DEFAULT_MODULE  = "module1";   // ajuste para module2/3/4/5 conforme o arquivo
  const DEFAULT_N       = 10;

  // ========= Utils: login compatível com seu gate =========
  const stripDiacritics = s => (s || '').normalize('NFD').replace(/[\u0300-\u036f]/g, '');
  const normalizeLogin  = s => {
    const raw = String(s || '').trim().toLowerCase();
    if (!raw) return '';
    return raw.includes('@') ? raw.split('@')[0] : raw;
  };

  function readFromStorage(){
    try{
      const keys = ['student_login','vhcm_current_user','current_user','user_login','login','user'];
      for (const k of keys){
        const v = normalizeLogin(stripDiacritics(localStorage.getItem(k) || sessionStorage.getItem(k) || ''));
        if (v) return v;
      }
    }catch{}
    return '';
  }
  function readFromGlobals(){
    try{
      const cand = [
        window.CURRENT_USER,
        window.VHCM_CURRENT_USER,
        window.__VHCM && window.__VHCM.currentUser,
        window.__vhcm && window.__vhcm.user && window.__vhcm.user.login
      ];
      for (const c of cand){
        const v = normalizeLogin(stripDiacritics(c || ''));
        if (v) return v;
      }
    }catch{}
    return '';
  }
  function readFromCookies(){
    try{
      const map = Object.fromEntries((document.cookie || '').split(';').filter(Boolean).map(s=>{
        const [k,...r]=s.split('=');
        return [k.trim(), decodeURIComponent((r.join('=')||'').trim())];
      }));
      for (const k of ['student_login','vhcm_current_user','login']){
        const v = normalizeLogin(stripDiacritics(map[k] || ''));
        if (v) return v;
      }
    }catch{}
    return '';
  }
  function getCurrentUser(){ return readFromStorage() || readFromGlobals() || readFromCookies() || ''; }

  function waitForLogin(maxWaitMs = 8000){
    return new Promise(resolve => {
      let u = getCurrentUser();
      if (u) return resolve(u);

      let done = false;
      const finish = (v) => { if(!done){ done=true; resolve(v||''); cleanup(); } };

      const onEvt = () => finish(getCurrentUser());
      const onStorage = (e) => {
        if (['student_login','vhcm_current_user','current_user','user_login','login','user'].includes(e.key||'')) {
          finish(getCurrentUser());
        }
      };
      window.addEventListener('vhcm:login', onEvt);
      window.addEventListener('storage', onStorage);

      const start = Date.now();
      const iv = setInterval(()=>{
        u = getCurrentUser();
        if (u) finish(u);
        if (Date.now() - start > maxWaitMs) finish('');
      }, 200);

      function cleanup(){
        try{ window.removeEventListener('vhcm:login', onEvt); }catch{}
        try{ window.removeEventListener('storage', onStorage); }catch{}
        try{ clearInterval(iv); }catch{}
      }
    });
  }

  // ========= Elements =========
  const $ = id => document.getElementById(id);
  const subtitle = $("sq-subtitle");
  const alerts   = $("sq-alerts");
  const quizRoot = $("sq-quiz");
  const btnSubmit= $("sq-submit");
  const btnSave  = $("sq-save");
  const statusEl = $("sq-status");
  const timerEl  = $("sq-timer");

  const alert = (cls,msg)=>{ const d=document.createElement('div'); d.className=cls; d.textContent=msg; alerts.appendChild(d); };
  const setStatus = (m)=>{ statusEl.textContent = m; };
  const enableActions = (on)=>{ btnSubmit.disabled=!on; btnSave.disabled=!on; };

  // ========= Flow =========
  (async function init(){
    const student_id = await waitForLogin();
    if(!student_id){
      subtitle.textContent = "Login not detected. Please refresh after logging in.";
      alert("sq-warn","Could not detect your login. If your name appears above, just refresh.");
      return;
    }

    subtitle.textContent = "Starting attempt…";

    const payload = { student_id, track: DEFAULT_TRACK, module: DEFAULT_MODULE, n_mcq: DEFAULT_N };
    const startRes = await safeJsonPost(API_BASE + "/selfquiz/attempt/start", payload);

    if(!startRes || !startRes.ok){
      subtitle.textContent = (startRes && (startRes.error || startRes.message)) || "Could not start attempt.";
      alert("sq-err", subtitle.textContent);
      return;
    }

    const attempt_id = startRes.attempt_id;
    const timeLimit  = Number(startRes.time_limit_sec || 1200);
    const qids       = Array.isArray(startRes.question_ids) ? startRes.question_ids : [];

    subtitle.textContent = `Attempt started (module: ${startRes.module || DEFAULT_MODULE}).`;

    if(!qids.length){
      alert("sq-warn","No questions were drawn. Check the pool/config on the backend.");
      return;
    }

    const qdata = await safeJsonGet(API_BASE + "/selfquiz/questions?ids=" + encodeURIComponent(qids.join(",")));
    const items = (qdata && Array.isArray(qdata.items)) ? qdata.items : [];
    if(!items.length){
      alert("sq-err","Failed to load questions. Check /selfquiz/questions.");
      return;
    }

    renderQuiz(items);
    enableActions(true);
    restoreDraft(attempt_id);
    startTimer(timeLimit, submitNow);

    btnSave.onclick   = () => { localStorage.setItem("sq_"+attempt_id, JSON.stringify(readAnswers())); setStatus("Draft saved."); };
    btnSubmit.onclick = submitNow;

    async function submitNow(){
      enableActions(false);
      const answers = readAnswers();
      const res = await safeJsonPost(API_BASE + "/selfquiz/attempt/submit", { attempt_id, answers });
      if(!res || !res.ok){
        setStatus("Submit failed. Please try again.");
        enableActions(true);
        return;
      }
      setStatus(`Submitted! Score: ${res.score} / ${res.max_score}.`);
      try{ localStorage.removeItem("sq_"+attempt_id); }catch{}
    }
  })();

  // ========= Render/helpers =========
  function renderQuiz(items){
    quizRoot.innerHTML = "";
    items.forEach((q,i) => {
      const card = document.createElement("div");
      card.className = "sq-card";
      card.innerHTML = `
        <div class="sq-qnum">Q${i+1}</div>
        <div class="sq-stem">${escapeHtml(q.stem || q.question || "")}</div>
        <div class="sq-opts">
          ${opt(q,"A")}${opt(q,"B")}${opt(q,"C")}${opt(q,"D")}${opt(q,"E")}
        </div>`;
      quizRoot.appendChild(card);
    });
  }
  function opt(q,l){
    const t = (q.options && q.options[l]) || "";
    if(!t) return "";
    return `<label class="sq-opt">
      <input type="radio" name="${escapeAttr(q.question_id)}" value="${l}">
      <div><strong>${l})</strong> ${escapeHtml(t)}</div>
    </label>`;
  }
  function readAnswers(){
    const out = {};
    quizRoot.querySelectorAll('input[type="radio"]:checked').forEach(inp => { out[inp.name] = inp.value; });
    return out;
  }
  function restoreDraft(id){
    try{
      const raw = localStorage.getItem("sq_"+id);
      if(!raw) return;
      const saved = JSON.parse(raw) || {};
      Object.entries(saved).forEach(([qid, letter]) => {
        const sel = `#sq-quiz input[type="radio"][name="${cssEscape(qid)}"][value="${letter}"]`;
        const el  = document.querySelector(sel);
        if (el) el.checked = true;
      });
      alert("sq-ok","Draft restored.");
    }catch{}
  }
  function startTimer(s,onEnd){
    let left = Number(s) || 0;
    const tick = () => {
      const m = String(Math.floor(left/60)).padStart(2,"0");
      const ss= String(left%60).padStart(2,"0");
      document.getElementById("sq-timer").textContent = m+":"+ss;
      if(left<=0) onEnd(); else { left--; setTimeout(tick,1000); }
    };
    tick();
  }

  // ========= HTTP & escaping =========
  async function safeJsonGet(u){ try{ const r=await fetch(u); if(!r.ok) return null; return await r.json(); }catch{ return null; } }
  async function safeJsonPost(u,b){
    try{
      const r=await fetch(u,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(b)});
      if(!r.ok) return null;
      return await r.json();
    }catch{ return null; }
  }
  function escapeHtml(s){ return String(s||"").replace(/[&<>"']/g,m=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }
  function escapeAttr(s){ return String(s||"").replace(/"/g,'&quot;').replace(/'/g,'&#39;'); }
  function cssEscape(s){ return String(s||"").replace(/(["\\\]\\])/g,"\\$1"); }
})();
</script>
