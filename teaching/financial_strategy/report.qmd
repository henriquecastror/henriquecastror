---
title: "Personal reports"
---

<script>
  const SLIDE_ID = "reports";
  const REPORTS_BASE = "https://course-chat.hcmrtns.workers.dev"; 
</script>




```{=html}
<style>
/* ===== Estilo local: afeta somente esta página ===== */
main.content table {
  width: 100%;
  border-collapse: collapse;
  font-size: 15px;
  margin: 1.2em 0;
}
/* Cabeçalho */
main.content table thead th,
main.content table tr:first-child th {
  background: #1e293b;    /* Slate-800 */
  color: #ffffff;
  padding: 10px 8px;
  text-align: center;
  font-weight: 700;
  border-top: 2px solid #0f172a;
}
/* Células */
main.content table td {
  padding: 9px 8px;
  text-align: center;
  border-bottom: 1px solid #e2e8f0;
}
/* Linhas alternadas */
main.content table tbody tr:nth-child(even),
main.content table tr:nth-child(even):not(:first-child) {
  background: #f8fafc;
}
/* Hover highlight */
main.content table tbody tr:hover,
main.content table tr:hover:not(:first-child) {
  background: #e0f2fe;
}
/* Ícones/links */
main.content table td a {
  font-size: 18px;
  text-decoration: none;
}
main.content table td:first-child,
main.content table th:first-child { text-align: center; }
main.content table td:nth-child(2),
main.content table th:nth-child(2) { text-align: center; }

/* ===== Ações do relatório (botões) ===== */
.report-actions{ margin: 1.25rem 0 1.5rem; display:flex; gap:.8rem; flex-wrap:wrap; justify-content:center }
.report-btn{
  --bg1:#4f46e5; --bg2:#7c3aed; --ink:#fff;
  display:inline-flex; align-items:center; gap:.55rem;
  padding:.8rem 1.15rem; border-radius:999px; font-weight:600;
  color:var(--ink); text-decoration:none;
  background:linear-gradient(135deg,var(--bg1),var(--bg2));
  border:1px solid rgba(255,255,255,.25);
  box-shadow:0 10px 18px rgba(79,70,229,.25);
  transition:transform .08s ease, box-shadow .08s ease, filter .08s ease;
}
.report-btn:hover{ transform:translateY(-1px) scale(1.01); box-shadow:0 12px 22px rgba(79,70,229,.32); filter:saturate(1.05) }
.report-btn:active{ transform:translateY(0) scale(.99) }
.report-icon{ display:inline-grid; place-items:center; width:1.25rem; height:1.25rem; border-radius:999px; background:rgba(255,255,255,.18); font-size:.85rem }

/* Notas/footers */
.small-note{ font-size:.9rem; color:#475569; margin-top:.5rem; text-align:center }
@media (prefers-color-scheme: dark){
  .report-btn{ box-shadow:0 10px 18px rgba(0,0,0,.35) }
  .small-note{ color:#94a3b8 }
}
</style>
```



::: {.callout-note}

**For students**

This page gives you access to your **personal report** with all your activities before midterm.

**Reports are private**: you must be logged in to view or download.

You can use this report to **compare your performance** with your peers and to **assess where you can improve**. 

:::



{{< include login-start.html >}}







<div class="report-actions">
  <a id="btn-report"
     class="report-btn"
     href="#"
     role="button"
     aria-label="View my report">
    <span class="report-icon" aria-hidden="true">⬇️</span>
    <span>View my Report</span>
  </a>
</div>


<script>
(function () {
  const BTN  = document.getElementById("btn-report");
  const BASE = "https://course-chat.hcmrtns.workers.dev";
  const NEXT = "/reports/html";

  // --- helpers ---
  const strip = s => (s||"").normalize("NFD").replace(/[\u0300-\u036f]/g,"");
  const norm  = s => {
    const r = String(s||"").trim().toLowerCase();
    return r.includes("@") ? r.split("@")[0] : r;
  };
  const isSid = v => /^[a-z0-9._-]{3,40}$/i.test(v||"") && /[_\.]/.test(v) && !/^mod(ule)?\d+$/i.test(v||"");
  const ensureSidInURL = (sid) => {
    const u = new URL(location.href);
    if (u.searchParams.get("sid") !== sid) {
      u.searchParams.set("sid", sid);
      history.replaceState(null, "", u.toString()); // mostra ?sid=... sem recarregar
    }
  };
  const makeBridgeURL = (sid) => `${BASE}/session/start?sid=${encodeURIComponent(sid)}&next=${encodeURIComponent(NEXT)}`;

  function findSidNow() {
    // 1) query
    const q = new URLSearchParams(location.search);
    const fromQ = norm(q.get("sid") || q.get("me") || "");
    if (isSid(fromQ)) return fromQ;

    // 2) expostos pelo login-start.html
    if (isSid(norm(window.studentId))) return norm(window.studentId);

    // 3) storage que o seu login usa
    try {
      const fsu = norm(strip(localStorage.getItem("fs_user")||""));
      if (isSid(fsu)) return fsu;
      const st  = norm(strip(localStorage.getItem("studentId")||""));
      if (isSid(st))  return st;
    } catch(_) {}

    // 4) cookies (se houver)
    try {
      const m = document.cookie.match(/(?:^|;\s*)student_id=([^;]+)/i);
      const c = norm(m ? decodeURIComponent(m[1]) : "");
      if (isSid(c)) return c;
    } catch(_) {}

    return "";
  }

  function armButtonFor(sid, autoGo=false) {
    ensureSidInURL(sid);
    const url = makeBridgeURL(sid);
    BTN.href = url;
    BTN.setAttribute("aria-disabled", "false");
    BTN.addEventListener("click", () => { /* normal nav */ }, { once:true });

    if (autoGo) {
      // Se quiser entrar direto no relatório após o login, ative:
      // window.location.href = url;
    }
  }

  function waitForLogin() {
    // Enquanto não tiver SID, deixamos o botão “bloqueado” e pedimos para o aluno logar
    BTN.href = "#";
    BTN.setAttribute("aria-disabled", "true");
    BTN.addEventListener("click", (e) => {
      e.preventDefault();
      alert("Faça login para ver seu relatório.");
    });

    // Quando o login acontecer, esses eventos são disparados pelo seu login-start.html
    const onSuccess = (sid) => { if (isSid(sid)) armButtonFor(sid, /*autoGo=*/false); };

    document.addEventListener("auth:login", (ev) => {
      const sid = norm(ev?.detail?.studentId || "");
      onSuccess(sid);
    });

    window.addEventListener("login:success", (ev) => {
      const sid = norm(ev?.detail?.studentId || window.studentId || "");
      onSuccess(sid);
    });

    // Fallback: se por algum motivo window.onLoginSuccess for chamado diretamente
    const orig = window.onLoginSuccess;
    window.onLoginSuccess = function(studentId){
      try { onSuccess(norm(studentId||"")); } catch(_) {}
      if (typeof orig === "function") return orig.apply(this, arguments);
    };
  }

  // --- boot ---
  const sid = findSidNow();
  if (sid) armButtonFor(sid, /*autoGo=*/false);
  else     waitForLogin();

})();
</script>



{{< include login-end.html >}}

