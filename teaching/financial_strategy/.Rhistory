#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
#Ibov
stock<-'^BVSP'
start<-'1995-01-01'
end   <- Sys.Date()
ibov <- yf_get(tickers = stock,first_date = start,last_date = end)
ibov<- ibov[order(as.numeric(ibov$ref_date)),]
start<-'1995-01-01'
end   <- Sys.Date()
ibov <- yf_get(tickers = stock,first_date = start,last_date = end)
ibov<- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices -1
end   <- Sys.Date()
ibov <- yf_get(tickers = stock,first_date = start,last_date = end)
ibov<- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices -1
#Selic
selic <- get_Quandl_series(id_in = c('Selic' = 'BCB/11'),
api_key = api_key,
first_date = start,
last_date = end)
#Selic
selic <- get_Quandl_series(id_in = c('Selic' = 'BCB/11'),
api_key = api_key,
first_date = start,
last_date = end)
#| include: false
#| warning: false
api_key <- "bNi3txU_k-4z53LXNo1X"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: slide
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
#### QUANDL API
# Step to create your key
# 1. Go to https://www.quandl.com/
# 2. Create an account
# 3. Get your key
# 4. Add your key below (I can't give you mine)
api_KEY <- "Your QUANDL API KEY here"
#Ibov
stock<-'^BVSP'
start<-'1995-01-01'
end   <- Sys.Date()
ibov <- yf_get(tickers = stock,first_date = start,last_date = end)
ibov<- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices -1
#Selic
selic <- get_Quandl_series(id_in = c('Selic' = 'BCB/11'),
api_key = api_key,
first_date = start,
last_date = end)
selic<- selic[order(as.numeric(selic$ref_date)),]
selic$value <- selic$value / 100
# Cumulative return Selic
return_selic <- data.frame(nrow(selic):1)
colnames(return_selic)<- "selic_return"
for(i in (2:nrow(selic))) {
return_selic[i,1] <- Return.cumulative( selic$value[1:i] )
}
# CDI
cdi <- get_Quandl_series(id_in =  c('CDI' = 'BCB/12'),
api_key = api_key ,
first_date = start ,
last_date = end)
cdi<- cdi[order(as.numeric(cdi$ref_date)),]
cdi$value <- cdi$value / 100
# Cumulative return CDI
return_CDI <- data.frame(nrow(cdi):1)
colnames(return_CDI)<- "CDI_return"
for(i in (2:nrow(cdi))) {
return_CDI[i,1] <- Return.cumulative( cdi$value[1:i] )
}
#Inflation Brazil
inf <- get_Quandl_series(id_in =  c('Inflation' = 'BCB/433'),
api_key = api_key,
first_date = start,
last_date = end)
inf<- inf[order(as.numeric(inf$ref_date)),]
inf$value <- inf$value / 100
# Cumulative return Inflation
return_Inf <- data.frame(nrow(inf):1)
colnames(return_Inf)<- "Inflation_return"
for(i in (2:nrow(inf))) {
return_Inf[i,1] <- Return.cumulative( inf$value[1:i] )
}
# Merging dataframes
selic <- cbind(selic, return_selic)
View(return_selic)
my.id <- c('Taxa de juros - Selic' = 11)
df <- gbcbd_get_series(my.id, cache.path = tempdir())
install.packages("‘GetBCBData’")
Quandl.api_key('bNi3txU_k-4z53LXNo1X') # set your API key = Comando necessário pra acessar o Quandl
selic <- Quandl("BCB/4390",type = 'xts') # importando a serie do selic do Bacen
library(quantmod)
Quandl.api_key('bNi3txU_k-4z53LXNo1X') # set your API key = Comando necessário pra acessar o Quandl
Quandl.api_key('bNi3txU_k-4z53LXNo1X') # set your API key = Comando necessário pra acessar o Quandl
selic <- Quandl("BCB/4390",type = 'xts') # importando a serie do selic do Bacen
# Carregue a biblioteca
library(quantmod)
# Especifique o ticker da SELIC (taxa básica de juros)
selic_ticker <- "WIKI/SELIC"  # O ticker pode variar dependendo da fonte de dados
# Defina o período desejado
start_date <- "2020-01-01"
end_date <- Sys.Date()  # Data atual
# Baixe os dados
getSymbols(selic_ticker, src = "yahoo", from = start_date, to = end_date)
# Especifique o ticker da SELIC (taxa básica de juros)
selic_ticker <- "BCB/11"  # O ticker pode variar dependendo da fonte de dados
# Defina o período desejado
start_date <- "2020-01-01"
end_date <- Sys.Date()  # Data atual
# Baixe os dados
getSymbols(selic_ticker, src = "yahoo", from = start_date, to = end_date)
# Visualize os dados
head(SELIC)
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
selic<- download.file("https://api.bcb.gov.br/dados/serie/bcdata.sgs.11/dados?formato=csv", destfile = "bcdata_sgs_11.csv", method = "curl")
selic<- download.file("https://api.bcb.gov.br/dados/serie/bcdata.sgs.11/dados?formato=csv", destfile = "bcdata_sgs_11.csv", method = "curl")
head(selic)
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(downloader)
library(dplyr)
library(ggthemes)
library(ggplot2)
library(tidyr)
library(tidyquant)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(yfR)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
url <- "https://ceqef.fgv.br/sites/default/files/2023-12/Serie%20de%20Equity%20Risk%20Premium%20Novembro%20de%202023.xlsx"
download(url, dest="files/epr.xls", mode="wb")
data <- read_excel("files/epr.xls", col_types = c("date","numeric") )
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
url <- "https://ceqef.fgv.br/sites/default/files/2023-12/Serie%20de%20Equity%20Risk%20Premium%20Novembro%20de%202023.xlsx"
download(url, dest="files/epr.xlsx", mode="wb")
data <- read_excel("files/epr.xlsx", col_types = c("date","numeric") )
data <- data[2:nrow(data),1:2]
colnames(data) <- c("month", "erp")
p<-ggplot(data, aes(x=month, y = erp)) + geom_line() + theme_solarized()+
labs(y = "Equity Risk Premium (ERP)",
x = "",
title = "Equity Risk Premium (ERP) in Brazil" ,
caption = "Source: https://ceqef.fgv.br/node/594" )
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
import pandas as pd
import matplotlib.pyplot as plt
url <- "https://ceqef.fgv.br/sites/default/files/2023-12/Serie%20de%20Equity%20Risk%20Premium%20Novembro%20de%202023.xlsx"
data = pd.read_excel(url, header=2)
data = data.iloc[:, 0:2]
data.columns = ["month", "erp"]
fig, ax = plt.subplots(figsize=(20, 10))
ax.plot(data["month"], data["erp"])
ax.set_xlabel("Time", fontsize=20)
ax.set_ylabel("Equity Risk Premium (ERP)", fontsize=20)
ax.set_title("Equity Risk Premium (ERP) in Brazil", fontsize=25)
ax.text(0.5, -0.1, "Source: https://ceqef.fgv.br/node/594", transform=ax.transAxes, ha="center")
plt.show()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
import pandas as pd
import matplotlib.pyplot as plt
url = "https://ceqef.fgv.br/sites/default/files/2023-12/Serie%20de%20Equity%20Risk%20Premium%20Novembro%20de%202023.xlsx"
data = pd.read_excel(url, header=2)
data = data.iloc[:, 0:2]
data.columns = ["month", "erp"]
fig, ax = plt.subplots(figsize=(20, 10))
ax.plot(data["month"], data["erp"])
ax.set_xlabel("Time", fontsize=20)
ax.set_ylabel("Equity Risk Premium (ERP)", fontsize=20)
ax.set_title("Equity Risk Premium (ERP) in Brazil", fontsize=25)
ax.text(0.5, -0.1, "Source: https://ceqef.fgv.br/node/594", transform=ax.transAxes, ha="center")
plt.show()
