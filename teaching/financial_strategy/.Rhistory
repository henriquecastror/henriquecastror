#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
#Ibov
stock<-'^BVSP'
start<-'1995-01-01'
end   <- Sys.Date()
ibov <- yf_get(tickers = stock,first_date = start,last_date = end)
ibov<- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices -1
#Selic - Download manually from ipeadata "Taxa de juros: Overnight / Selic"
selic <- read_excel("files/selic.xls")
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date , format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252* 100)
# Cumulative return Selic
return_selic <- data.frame(selic_return = rep(NA, nrow(selic)))
colnames(return_selic)<- "selic_return"
for(i in (2:nrow(selic))) {
return_selic[i,1] <- Return.cumulative( selic$selic[1:i] )
}
# Merging dataframes
selic <- cbind(selic, return_selic)
df <- merge(ibov ,selic, by=c("ref_date"))
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
# Graph cumulated return CDI and IBOV
p <- ggplot(df, aes(ref_date)) +
geom_line(aes(y = Ibov_return, colour = "Ibov")) +
geom_line(aes(y = selic_return, colour = "Selic")) +
labs(y='Cumulative return (daily)') + theme_solarized() +
ggtitle("Cumulative Returns  Ibov, and Selic (1995-2023)")
ggplotly(p)
# Calcular retorno acumulado da Selic de 1995 atÃ© 2023
retorno_acumulado_selic <- prod(1 + selic$selic) - 1
# Exibir resultado formatado
print(paste0("Retorno acumulado da Selic (1995-2023): ", round(retorno_acumulado_selic * 100, 2), "%"))
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
#Ibov
stock<-'^BVSP'
start<-'1995-01-01'
end   <- Sys.Date()
ibov <- yf_get(tickers = stock,first_date = start,last_date = end)
ibov<- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices -1
#Selic - Download manually from ipeadata "Taxa de juros: Overnight / Selic"
selic <- read_excel("files/selic.xls")
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date , format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252* 100)
# Cumulative return Selic
return_selic <- data.frame(selic_return = rep(NA, nrow(selic)))
colnames(return_selic)<- "selic_return"
for(i in (2:nrow(selic))) {
return_selic[i,1] <- Return.cumulative( selic$selic[1:i] )
}
# Merging dataframes
selic <- cbind(selic, return_selic)
df <- merge(ibov ,selic, by=c("ref_date"))
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
# Graph cumulated return CDI and IBOV
p <- ggplot(df, aes(ref_date)) +
geom_line(aes(y = Ibov_return, colour = "Ibov")) +
geom_line(aes(y = selic_return, colour = "Selic")) +
labs(y='Cumulative return (daily)') + theme_solarized() +
ggtitle("Cumulative Returns  Ibov, and Selic")
ggplotly(p)
View(selic)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
#Ibov
stock<-'^BVSP'
start<-'1995-01-01'
end   <- Sys.Date()
ibov <- yf_get(tickers = stock,first_date = start,last_date = end)
ibov<- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices -1
#Selic - Download manually from ipeadata "Taxa de juros: Overnight / Selic"
selic <- read_excel("files/selic.xls")
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date , format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252* 100)
# Cumulative return Selic
return_selic <- data.frame(selic_return = rep(NA, nrow(selic)))
colnames(return_selic)<- "selic_return"
for(i in (2:nrow(selic))) {
return_selic[i,1] <- Return.cumulative( selic$selic[1:i] )
}
# Merging dataframes
selic <- cbind(selic, return_selic)
df <- merge(ibov ,selic, by=c("ref_date"))
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
# Graph cumulated return CDI and IBOV
p <- ggplot(df, aes(ref_date)) +
geom_line(aes(y = Ibov_return, colour = "Ibov")) +
geom_line(aes(y = selic_return, colour = "Selic")) +
labs(y='Cumulative return (daily)') + theme_solarized() +
ggtitle("Cumulative Returns  Ibov, and Selic")
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
#Ibov
stock<-'^BVSP'
start<-'2000-01-01'
end   <- Sys.Date()
ibov <- yf_get(tickers = stock,first_date = start,last_date = end)
ibov<- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices -1
#Selic - Download manually from ipeadata "Taxa de juros: Overnight / Selic"
selic <- read_excel("files/selic.xls")
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date , format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252* 100)
# Cumulative return Selic
return_selic <- data.frame(selic_return = rep(NA, nrow(selic)))
colnames(return_selic)<- "selic_return"
for(i in (2:nrow(selic))) {
return_selic[i,1] <- Return.cumulative( selic$selic[1:i] )
}
# Merging dataframes
selic <- cbind(selic, return_selic)
df <- merge(ibov ,selic, by=c("ref_date"))
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
# Graph cumulated return CDI and IBOV
p <- ggplot(df, aes(ref_date)) +
geom_line(aes(y = Ibov_return, colour = "Ibov")) +
geom_line(aes(y = selic_return, colour = "Selic")) +
labs(y='Cumulative return (daily)') + theme_solarized() +
ggtitle("Cumulative Returns  Ibov, and Selic")
ggplotly(p)
View(ibov)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
# Define API key and other parameters
import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
stock = "^BVSP"
start = "2000-01-01"
end = pd.Timestamp.now()
# Get data for IBOV
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Value': 'Ibovespa'})
ibov["return"] = ibov["Adj Close"].pct_change()
ibov['Ibov_return'] = (1 + ibov['return']).cumprod()
ibov = ibov[['ref_date', 'Ibov_return']]
# Get data for Selic
selic = pd.read_excel("files/selic.xls")
selic.columns = ["ref_date", "selic"]
selic['ref_date'] = pd.to_datetime(selic['ref_date'], format="%d/%m/%Y")
selic = selic.dropna()
selic['selic'] = selic['selic'] / (252 * 100)
# Calculate cumulative return for Selic
selic['selic_return'] = (1 + selic['selic']).cumprod()
# Merge dataframes
df = pd.merge(ibov, selic, on="ref_date")
# Plot data
fig, ax = plt.subplots(figsize=(10,5))
ax.plot(df["ref_date"], df["Ibov_return"], label='Ibov')
ax.plot(df["ref_date"], df["selic_return"], label='Selic')
plt.ylabel('Cumulative return (daily)', fontsize=13)
plt.title('Cumulative Returns Ibov and Selic ', fontsize=15)
plt.xlabel('Date', fontsize=13)
plt.legend(loc='upper left')
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
# Ibov
stock <- '^BVSP'
start <- '2002-01-01'  # Adjusted start date
end <- '2007-12-31'   # Adjusted end date
ibov <- yf_get(tickers = stock, first_date = start, last_date = end)
ibov <- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices - 1
# Selic - Download manually from ipeadata "Taxa de juros: Overnight / Selic"
selic <- read_excel("files/selic.xls")
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date, format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252 * 100)
# Filter Selic data for the desired period (2010-2020)
selic <- selic %>% filter(ref_date >= start & ref_date <= end)
# Cumulative return Selic
return_selic <- data.frame(nrow(selic):1)
colnames(return_selic) <- "selic_return"
for (i in (2:nrow(selic))) {
return_selic[i, 1] <- Return.cumulative(selic$selic[1:i])
}
# Merging dataframes
selic <- cbind(selic, return_selic)
df <- merge(ibov, selic, by = c("ref_date"))
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
# Graph cumulated return CDI and IBOV
p <- ggplot(df, aes(ref_date)) +
geom_line(aes(y = Ibov_return, colour = "Ibov")) +
geom_line(aes(y = selic_return, colour = "Selic")) +
labs(y = 'Cumulative return (daily)') + theme_solarized() +
ggtitle("Cumulative Returns Ibov, and Selic (2002-2007)")
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
# Define API key and other parameters
import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
stock = "^BVSP"
start = "2002-01-01"
end = "2007-12-31"
# Get data for IBOV
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Adj Close': 'Ibovespa'})
ibov["return"] = ibov["Ibovespa"].pct_change()
ibov['Ibov_return'] = (1 + ibov['return']).cumprod()
ibov = ibov[['ref_date', 'Ibov_return']]
# Get data for Selic
selic = pd.read_excel("files/selic.xls")
selic.columns = ["ref_date", "selic"]
selic['ref_date'] = pd.to_datetime(selic['ref_date'], format="%d/%m/%Y")
selic = selic.dropna()
selic['selic'] = selic['selic'] / (252 * 100)
# Filter Selic data for the desired period
selic = selic[(selic['ref_date'] >= start) & (selic['ref_date'] <= end)]
# Calculate cumulative return for Selic
selic['selic_return'] = (1 + selic['selic']).cumprod()
# Merge dataframes
df = pd.merge(ibov, selic, on="ref_date")
# Plot data
fig, ax = plt.subplots(figsize=(10,5))
ax.plot(df["ref_date"], df["Ibov_return"], label='Ibov')
ax.plot(df["ref_date"], df["selic_return"], label='Selic')
plt.ylabel('Cumulative return (daily)', fontsize=13)
plt.title('Cumulative Returns Ibov and Selic (2002-2007)', fontsize=15)
plt.xlabel('Date', fontsize=13)
plt.legend(loc='upper left')
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: false
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
library(shiny)
# Shiny UI and Server functions
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
dateInput("start_date", "Start Date:",
value = '2000-01-01', format = "yyyy-mm-dd"),
dateInput("end_date", "End Date:",
value = Sys.Date(), format = "yyyy-mm-dd")
),
mainPanel(
plotlyOutput("cumulative_plot")
)
)
)
server <- function(input, output) {
output$cumulative_plot <- renderPlotly({
# Define the user-selected start and end dates
start <- input$start_date
end <- input$end_date
# Download Ibov data based on selected dates
stock <- '^BVSP'
ibov <- yf_get(tickers = stock, first_date = start, last_date = end)
ibov <- ibov[order(as.numeric(ibov$ref_date)),]
ibov$Ibov_return <- ibov$cumret_adjusted_prices - 1
# Download Selic data
selic <- GetBCBData::gbcbd_get_series(
id = 432,
first.date = start,
last.date = end
)
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date, format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252 * 100)
# Cumulative return Selic
return_selic <- data.frame(nrow(selic):1)
colnames(return_selic) <- "selic_return"
for(i in (2:nrow(selic))) {
return_selic[i, 1] <- Return.cumulative(selic$selic[1:i])
}
# Merging dataframes
selic <- cbind(selic, return_selic)
df <- merge(ibov, selic, by = c("ref_date"))
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
# Plot the data
p <- ggplot(df, aes(ref_date)) +
geom_line(aes(y = Ibov_return, colour = "Ibov")) +
geom_line(aes(y = selic_return, colour = "Selic")) +
labs(y = 'Cumulative return (daily)') +
labs(x = '') +
theme_solarized() +
ggtitle("Cumulative Returns for Ibov and Selic")
ggplotly(p)
})
}
shinyApp(ui, server)
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
url <- "https://ceqef.fgv.br/sites/default/files/2023-12/Serie%20de%20Equity%20Risk%20Premium%20Novembro%20de%202023.xlsx"
download(url, dest="files/epr.xlsx", mode="wb")
data <- read_excel("files/epr.xlsx", col_types = c("date","numeric") )
data <- data[2:nrow(data),1:2]
colnames(data) <- c("month", "erp")
p<-ggplot(data, aes(x=month, y = erp)) + geom_line() + theme_solarized()+
labs(y = "Equity Risk Premium (ERP)",
x = "",
title = "Equity Risk Premium (ERP) in Brazil" ,
caption = "Source: https://ceqef.fgv.br/node/594" )
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
url <- "https://ceqef.fgv.br/sites/default/files/2025-01/Serie%20de%20Equity%20Risk%20Premium%20Dezembro%202024.xlsx"
download(url, dest="files/epr.xlsx", mode="wb")
data <- read_excel("files/epr.xlsx", col_types = c("date","numeric") )
data <- data[2:nrow(data),1:2]
colnames(data) <- c("month", "erp")
p<-ggplot(data, aes(x=month, y = erp)) + geom_line() + theme_solarized()+
labs(y = "Equity Risk Premium (ERP)",
x = "",
title = "Equity Risk Premium (ERP) in Brazil" ,
caption = "Source: https://ceqef.fgv.br/node/594" )
ggplotly(p)
