#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
#Ibov
stock<-'^BVSP'
start<-'2000-01-01'
end   <- Sys.Date()
ibov <- yf_get(tickers = stock,first_date = start,last_date = end)
ibov<- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices -1
#Selic - Download manually from ipeadata "Taxa de juros: Overnight / Selic"
selic <- read_excel("files/selic.xls")
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date , format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252* 100)
# Cumulative return Selic
return_selic <- data.frame(selic_return = rep(NA, nrow(selic)))
colnames(return_selic)<- "selic_return"
for(i in (2:nrow(selic))) {
return_selic[i,1] <- Return.cumulative( selic$selic[1:i] )
}
# Merging dataframes
selic <- cbind(selic, return_selic)
View(selic)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Value': 'Ibovespa'})
ibov["return"] = ibov["Adj Close"].pct_change()
plt.close()
plt.hist(ibov['return'], bins=100, color='grey')
plt.title('IBOV', fontsize=20)
plt.ylabel('Daily return', fontsize=16 )
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stock <- '^BVSP'
start <- '2010-01-01'  # Adjusted start date
end <- '2018-12-31'   # Adjusted end date
ibov <- yf_get(tickers = stock, first_date = start, last_date = end)
ibov <- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices - 1
p<-ggplot(ibov,aes(ibov$ret_closing_prices))+
geom_histogram(color='#006600',
bins = 100) +
labs(x = "",
y='Daily return',
title="IBOV") +   theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stock <- '^BVSP'
start <- '2010-01-01'  # Adjusted start date
end <- Sys.Date()   # Adjusted end date
ibov <- yf_get(tickers = stock, first_date = start, last_date = end)
ibov <- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices - 1
p<-ggplot(ibov,aes(ibov$ret_closing_prices))+
geom_histogram(color='#006600',
bins = 100) +
labs(x = "",
y='Daily return',
title="IBOV") +   theme_solarized()
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Value': 'Ibovespa'})
ibov["return"] = ibov["Adj Close"].pct_change()
plt.close()
plt.hist(ibov['return'], bins=100, color='grey')
plt.title('IBOV', fontsize=20)
plt.ylabel('Daily return', fontsize=16 )
plt.show()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Value': 'Ibovespa'})
ibov["return"] = ibov["Adj Close"].pct_change()
plt.close()
plt.hist(ibov['return'], bins=100, color='grey')
plt.title('IBOV', fontsize=20)
plt.ylabel('Daily return', fontsize=16 )
plt.show()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
start = "2010-01-01"
end = pd.Timestamp.now()
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Value': 'Ibovespa'})
ibov["return"] = ibov["Adj Close"].pct_change()
plt.close()
plt.hist(ibov['return'], bins=100, color='grey')
plt.title('IBOV', fontsize=20)
plt.ylabel('Daily return', fontsize=16 )
plt.show()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
start = "2010-01-01"
end = pd.Timestamp.now()
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Value': 'Ibovespa'})
ibov["return"] = ibov["Adj Close"].pct_change()
plt.close()
plt.hist(ibov['return'], bins=100, color='grey')
plt.title('IBOV', fontsize=20)
plt.ylabel('Daily return', fontsize=16 )
plt.show()
quit
quit
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(1, 1,5) ,3 )
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(100000, 1,5) ,3 )
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(1, 1,5) ,3 )
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(1, 1,5) ,3 )
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(1, 1,5) ,3 )
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(1, 1,5) ,3 )
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(1, 1,5) ,3 )
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(1, 1,5) ,3 )
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(1, 1,5) ,3 )
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(1, 1,5) ,3 )
#| eval: true
#| results: asis
#| echo: false
#| warning: false
library(webexercises)
v1 <- round( runif(1, 1,5) ,3 )
reticulate::repl_python()
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: true
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
start = '2010-01-01'
end = pd.Timestamp.now()
stocks = ["^BVSP","ABEV3.SA","ALPA4.SA","AMER3.SA","B3SA3.SA","BBAS3.SA","BBDC3.SA","BBDC4.SA","BEEF3.SA","BPAN4.SA","BRAP4.SA","BRFS3.SA","BRKM5.SA","BRML3.SA","CCRO3.SA","CIEL3.SA","CMIG4.SA","COGN3.SA","CPFE3.SA","CPLE6.SA","CSAN3.SA","CSNA3.SA","CYRE3.SA","DXCO3.SA","ECOR3.SA","EGIE3.SA","ELET3.SA","ELET6.SA","EMBR3.SA","ENBR3.SA","ENEV3.SA","ENGI11.SA","EQTL3.SA","EZTC3.SA","FLRY3.SA","GGBR4.SA","GOAU4.SA","GOLL4.SA","HYPE3.SA","ITSA4.SA","ITUB4.SA","JBSS3.SA","JHSF3.SA","LREN3.SA","MGLU3.SA","MRFG3.SA","MRVE3.SA","MULT3.SA","PCAR3.SA","PETR3.SA","PETR4.SA","PRIO3.SA","QUAL3.SA","RADL3.SA","RENT3.SA","SANB11.SA","SBSP3.SA","SULA11.SA","SUZB3.SA","TAEE11.SA","TIMS3.SA","TOTS3.SA","UGPA3.SA","USIM5.SA","VALE3.SA","VIIA3.SA","VIVT3.SA","WEGE3.SA","YDUQ3.SA"]
results = []
for ticker in stocks:
asset = yf.download(ticker, start=start, end=end)
asset['return'] = asset['Adj Close'].pct_change()
asset = asset.dropna()
mean_return = asset['return'].mean()
std_return = asset['return'].std()
data = pd.DataFrame({'ticker': [ticker], 'average_return': [mean_return], 'standard_deviation': [std_return]})
results.append(data)
df = pd.concat(results).reset_index(drop=True)
plt.close()
fig, ax = plt.subplots(figsize=(20, 10))
for i in range(len(df)):
if df.loc[i, 'ticker'] == '^BVSP':
color = 'darkblue'
else:
color = 'black'
ax.scatter(x=df.loc[i, 'standard_deviation'], y=df.loc[i, 'average_return'], s=50, color=color)
plt.title("Historical return vs. Historical volatility (daily returns since 2010)", fontsize=20)
plt.xlabel("Average standard deviation (daily returns)", fontsize=15)
plt.ylabel("Average return (daily returns)", fontsize=15)
plt.show()
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
library(dplyr)
library(ggplot2)
library(gganimate)
library(ggthemes)
library(PerformanceAnalytics)
library(tidyr)
library(tidyquant)
library(roll)
library(plotly)
library(yfR)
#| warning: false
#| error: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: false
start <-'2015-01-01'
end   <-'2023-12-01'
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start, last_date = end, freq_data = "monthly")
tickers<-unique(data_temp$ticker)
df <- data_temp %>%  select(ref_date)  %>% distinct()
# Now collecting data
for (i in 1:length(tickers)) {
data <- yf_get(tickers[[i]],first_date = start,last_date = end,freq_data = "monthly")
data <- data[complete.cases(data),]
data <- data %>%  select(ref_date, ret_closing_prices)
colnames(data) <- c("ref_date",  tickers[[i]]  )
df <- merge(df,data,by="ref_date")
}
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
library(dplyr)
library(ggplot2)
library(gganimate)
library(ggthemes)
library(PerformanceAnalytics)
library(tidyr)
library(tidyquant)
library(roll)
library(plotly)
library(yfR)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(PerformanceAnalytics)
library(yfR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggthemes)
library(tidyquant)
library(roll)
library(plotly)
library(ggthemes)
stocks <-c('BBDC3.SA', 'PETR3.SA')
start <-'2010-01-01'
end   <-Sys.Date()
data <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
data<-data[complete.cases(data),]
p<-ggplot(data, aes(ref_date , price_close, group=ticker , color=ticker))+
geom_line() +
labs(x = "",
y='Closing prices',
title="Two assets returns",
subtitle = "Begin 01/01/2010") +   theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stock1 <- subset(data, ticker == stocks[1])
stock2 <- subset(data, ticker == stocks[2])
stock1$price_close2 <- stock1$price_close  / stock1$price_close[1] * 100
stock2$price_close2 <- stock2$price_close  / stock2$price_close[1] * 100
p<-ggplot(stock1, aes(ref_date , price_close2, color=ticker))+
geom_line() +
geom_line(data=stock2) +
labs(x = "",
y='Closing prices',
title="Two assets returns, Initial price = 100",
subtitle = "Begin 01/01/2010") +   theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
# Defining weights and calculating portfolio return (daily)
w <- c(0.40, 0.60)
# Creating a df with stocks and weights
w_tbl <- tibble(ticker = stocks,w = w)
# Including the weights in the df prices (which contains the prices)
prices  <- left_join(data ,w_tbl, by = 'ticker')
# calculating the product of return times the portfolio weights for all days (this is necessary to calculate average return)
prices$w_ret <- prices$ret_closing_prices * prices$w
# Creating a dataframe with portfolio returns
port_ret <- prices %>%
group_by(ref_date) %>%
summarise(port_ret = sum(w_ret))
# Creating prices from the vector of returns
port_ret$price_close2 <- cumprod(1+port_ret$port_ret) * 100
# Graph with all returns
port_ret$ticker <- 'Portfolio'
p <- ggplot(stock1, aes(ref_date , price_close2, color = ticker))+
geom_line() +geom_line(data=stock2) +geom_line(data=port_ret) +
labs(x = "",
y='Closing prices',
title="Two assets and Portfolio returns, Initial price = 100",
subtitle = "Begin 01/01/2010") +   theme_solarized()
ggplotly(p)
start <-'2015-01-01'
end   <-'2023-12-01'
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start, last_date = end, freq_data = "monthly")
tickers<-unique(data_temp$ticker)
#| warning: false
#| error: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: false
start <-'2015-01-01'
end   <-'2023-12-01'
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start, last_date = end, freq_data = "monthly")
#| eval: true
#| results: asis
#| echo: false
#| warning: false
# Randomizing company beta and volatility
beta_A <- rnorm(1, mean = 0.5, sd = 0.1)
beta_B <- rnorm(1, mean = 0.8, sd = 0.1)
beta_C <- rnorm(1, mean = 1.1, sd = 0.1)
beta_D <- rnorm(1, mean = 1.3, sd = 0.1)
vol_A <- rnorm(1, mean = 22, sd = 2)
vol_B <- rnorm(1, mean = 19, sd = 2)
vol_C <- rnorm(1, mean = 33, sd = 2)
vol_D <- rnorm(1, mean = 27, sd = 2)
# Randomizing risk-free rate and market return
rf <- rnorm(1, mean = 3, sd = 0.5)
market_return <- rnorm(1, mean = 9, sd = 1)
# Computing cost of capital for company A
cost_of_capital_A <- rf + beta_A * (market_return - rf)
#| eval: true
#| results: asis
#| echo: false
#| warning: false
# Randomizing company beta and volatility
beta_A <- rnorm(1, mean = 0.5, sd = 0.1)
beta_B <- rnorm(1, mean = 0.8, sd = 0.1)
beta_C <- rnorm(1, mean = 1.1, sd = 0.1)
beta_D <- rnorm(1, mean = 1.3, sd = 0.1)
vol_A <- rnorm(1, mean = 22, sd = 2)
vol_B <- rnorm(1, mean = 19, sd = 2)
vol_C <- rnorm(1, mean = 33, sd = 2)
vol_D <- rnorm(1, mean = 27, sd = 2)
# Randomizing risk-free rate and market return
rf <- rnorm(1, mean = 3, sd = 0.5)
market_return <- rnorm(1, mean = 9, sd = 1)
# Computing cost of capital for company A
cost_of_capital_A <- round(rf,2) + round(beta_A,2) * (round(market_return,2) - round(rf,2))
