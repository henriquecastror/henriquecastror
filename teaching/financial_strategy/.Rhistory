#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
# Define API key and other parameters
import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
stock = "^BVSP"
start = "1995-01-01"
end = pd.Timestamp.now()
# Get data for IBOV
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Value': 'Ibovespa'})
ibov["return"] = ibov["Adj Close"].pct_change()
ibov['Ibov_return'] = (1 + ibov['return']).cumprod()
ibov = ibov[['ref_date', 'Ibov_return']]
# Get data for Selic
selic = pd.read_excel("files/selic.xls")
selic.columns = ["ref_date", "selic"]
selic['ref_date'] = pd.to_datetime(selic['ref_date'], format="%d/%m/%Y")
selic = selic.dropna()
selic['selic'] = selic['selic'] / (252 * 100)
# Calculate cumulative return for Selic
selic['selic_return'] = (1 + selic['selic']).cumprod()
# Merge dataframes
df = pd.merge(ibov, selic, on="ref_date")
# Plot data
fig, ax = plt.subplots(figsize=(10,5))
ax.plot(df["ref_date"], df["Ibov_return"], label='Ibov')
ax.plot(df["ref_date"], df["selic_return"], label='Selic')
plt.ylabel('Cumulative return (daily)', fontsize=13)
plt.title('Cumulative Returns Ibov and Selic (1995-2023)', fontsize=15)
plt.xlabel('Date', fontsize=13)
plt.legend(loc='upper left')
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
# Ibov
stock <- '^BVSP'
start <- '2002-01-01'  # Adjusted start date
end <- '2007-12-31'   # Adjusted end date
ibov <- yf_get(tickers = stock, first_date = start, last_date = end)
ibov <- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices - 1
# Selic - Download manually from ipeadata "Taxa de juros: Overnight / Selic"
selic <- read_excel("files/selic.xls")
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date, format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252 * 100)
# Filter Selic data for the desired period (2010-2020)
selic <- selic %>% filter(ref_date >= start & ref_date <= end)
# Cumulative return Selic
return_selic <- data.frame(nrow(selic):1)
colnames(return_selic) <- "selic_return"
for (i in (2:nrow(selic))) {
return_selic[i, 1] <- Return.cumulative(selic$selic[1:i])
}
# Merging dataframes
selic <- cbind(selic, return_selic)
df <- merge(ibov, selic, by = c("ref_date"))
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
# Graph cumulated return CDI and IBOV
p <- ggplot(df, aes(ref_date)) +
geom_line(aes(y = Ibov_return, colour = "Ibov")) +
geom_line(aes(y = selic_return, colour = "Selic")) +
labs(y = 'Cumulative return (daily)') + theme_solarized() +
ggtitle("Cumulative Returns Ibov, and Selic (2002-2007)")
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
# Define API key and other parameters
import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
stock = "^BVSP"
start = "2002-01-01"
end = "2007-12-31"
# Get data for IBOV
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Adj Close': 'Ibovespa'})
ibov["return"] = ibov["Ibovespa"].pct_change()
ibov['Ibov_return'] = (1 + ibov['return']).cumprod()
ibov = ibov[['ref_date', 'Ibov_return']]
# Get data for Selic
selic = pd.read_excel("files/selic.xls")
selic.columns = ["ref_date", "selic"]
selic['ref_date'] = pd.to_datetime(selic['ref_date'], format="%d/%m/%Y")
selic = selic.dropna()
selic['selic'] = selic['selic'] / (252 * 100)
# Filter Selic data for the desired period
selic = selic[(selic['ref_date'] >= start) & (selic['ref_date'] <= end)]
# Calculate cumulative return for Selic
selic['selic_return'] = (1 + selic['selic']).cumprod()
# Merge dataframes
df = pd.merge(ibov, selic, on="ref_date")
# Plot data
fig, ax = plt.subplots(figsize=(10,5))
ax.plot(df["ref_date"], df["Ibov_return"], label='Ibov')
ax.plot(df["ref_date"], df["selic_return"], label='Selic')
plt.ylabel('Cumulative return (daily)', fontsize=13)
plt.title('Cumulative Returns Ibov and Selic (2002-2007)', fontsize=15)
plt.xlabel('Date', fontsize=13)
plt.legend(loc='upper left')
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
# Ibov
stock <- '^BVSP'
start <- '2010-01-01'  # Adjusted start date
end <- '2018-12-31'   # Adjusted end date
ibov <- yf_get(tickers = stock, first_date = start, last_date = end)
ibov <- ibov[order(as.numeric(ibov$ref_date)),]
# Cumulative return Ibov
ibov$Ibov_return <- ibov$cumret_adjusted_prices - 1
# Selic - Download manually from ipeadata "Taxa de juros: Overnight / Selic"
selic <- read_excel("files/selic.xls")
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date, format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252 * 100)
# Filter Selic data for the desired period (2010-2020)
selic <- selic %>% filter(ref_date >= start & ref_date <= end)
# Cumulative return Selic
return_selic <- data.frame(nrow(selic):1)
colnames(return_selic) <- "selic_return"
for (i in (2:nrow(selic))) {
return_selic[i, 1] <- Return.cumulative(selic$selic[1:i])
}
# Merging dataframes
selic <- cbind(selic, return_selic)
df <- merge(ibov, selic, by = c("ref_date"))
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
# Graph cumulated return CDI and IBOV
p <- ggplot(df, aes(ref_date)) +
geom_line(aes(y = Ibov_return, colour = "Ibov")) +
geom_line(aes(y = selic_return, colour = "Selic")) +
labs(y = 'Cumulative return (daily)') + theme_solarized() +
ggtitle("Cumulative Returns Ibov, and Selic (2010-2018)")
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
# Define API key and other parameters
import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
stock = "^BVSP"
start = "2010-01-01"
end = "2018-12-31"
# Get data for IBOV
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Adj Close': 'Ibovespa'})
ibov["return"] = ibov["Ibovespa"].pct_change()
ibov['Ibov_return'] = (1 + ibov['return']).cumprod()
ibov = ibov[['ref_date', 'Ibov_return']]
# Get data for Selic
selic = pd.read_excel("files/selic.xls")
selic.columns = ["ref_date", "selic"]
selic['ref_date'] = pd.to_datetime(selic['ref_date'], format="%d/%m/%Y")
selic = selic.dropna()
selic['selic'] = selic['selic'] / (252 * 100)
# Filter Selic data for the desired period
selic = selic[(selic['ref_date'] >= start) & (selic['ref_date'] <= end)]
# Calculate cumulative return for Selic
selic['selic_return'] = (1 + selic['selic']).cumprod()
# Merge dataframes
df = pd.merge(ibov, selic, on="ref_date")
# Plot data
fig, ax = plt.subplots(figsize=(10,5))
ax.plot(df["ref_date"], df["Ibov_return"], label='Ibov')
ax.plot(df["ref_date"], df["selic_return"], label='Selic')
plt.ylabel('Cumulative return (daily)', fontsize=13)
plt.title('Cumulative Returns Ibov and Selic (2010-2018)', fontsize=15)
plt.xlabel('Date', fontsize=13)
plt.legend(loc='upper left')
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
p<-ggplot(ibov,aes(ibov$ret_closing_prices))+
geom_histogram(color='#006600',
bins = 100) +
labs(x = "",
y='Daily return',
title="IBOV") +   theme_solarized()
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Value': 'Ibovespa'})
ibov["return"] = ibov["Adj Close"].pct_change()
plt.close()
plt.hist(ibov['return'], bins=100, color='grey')
plt.title('IBOV', fontsize=20)
plt.ylabel('Daily return', fontsize=16 )
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
ibov$sd <- roll_sd(ibov$ret_closing_prices,
width = 100,
min_obs = 100 ) * sqrt(250)
p<-ggplot(ibov,aes(ref_date,sd))+
geom_line(color='#2986cc') +
labs(x = "",
y='Standard deviation using 100 daily returns',
title="IBOV (Daily returns since 2010)") +   theme_solarized()
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf
stock = "^BVSP"
start = "2010-01-01"
end = pd.Timestamp.now()
ibov = yf.download(stock, start=start, end=end)
ibov["return"] = ibov["Adj Close"].pct_change()
ibov['rolling_sd'] = ibov['return'].rolling(window=100, min_periods=100).std() * (250 ** 0.5)
plt.close()
fig, ax = plt.subplots(figsize=(20,10))
ax.plot(ibov.index, ibov['rolling_sd'], color='#2986cc')
ax.set_xlabel('')
ax.set_ylabel('Standard deviation using 100 daily returns', fontsize=13)
ax.set_title('IBOV (Daily returns since 2010)', fontsize=15)
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stocks <-c('AMER3.SA' )
amer <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
amer<-amer[complete.cases(amer),]
amer$sd <- roll_sd(amer$ret_closing_prices,
width = 100,
min_obs = 100 ) * sqrt(250)
ibov <- subset(ibov, ref_date >= as.Date("2010-01-05"))
p<-ggplot() +
geom_line(data=amer, aes(ref_date, sd), color='#801e00') +
geom_line(data=ibov, aes(ref_date, sd), color='#2986cc') +
labs(x = "",y='Standard deviation using 100 daily returns',
title="IBOV vs AMER3 (Daily returns since 2010)") +   theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
p<-ggplot(ibov,aes(ibov$ref_date,ibov$ret_closing_prices))+
geom_line(color='#2986cc') +
labs(x = "",
y='Daily returns',
title="IBOV (Daily returns since 2010)")   +   theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
p<-ggplot() +
geom_line(data=amer, aes(amer$ref_date, amer$ret_closing_prices), color='#801e00') +
geom_line(data=ibov, aes(ibov$ref_date, ibov$ret_closing_prices), color='#2986cc') +
labs(x = "", y='Daily returns') +
ggtitle("IBOV vs AMER3 (Daily returns since 2010)") +
theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
start <-'2010-01-01'
end   <- Sys.Date()
asset <- yf_collection_get("IBOV",
first_date = start,
last_date = end,
thresh_bad_data = 0.5,
freq_data ="yearly")
asset<-asset[complete.cases(asset),]
stocks <-c('^BVSP' )
ibov <- yf_get(tickers = stocks,
first_date = start,
last_date = end,
freq_data ="yearly")
ibov<-ibov[complete.cases(ibov),]
data<-rbind(asset,ibov)
mean_sd  <- data %>%
group_by(ticker) %>%
summarise_at(vars(ret_adjusted_prices),
list(mean = mean,
sd = sd)) %>%
as.data.frame()
p<-ggplot(mean_sd, aes(x=sd, y=mean)) +
ggrepel::geom_text_repel(data = mean_sd, aes(label = ticker) , size = 2.5 ,  max.overlaps = Inf)+
geom_point(size = 4)  +   xlim(0, 1) + ylim(0, 0.35) +
labs(x = "Average standard deviation (annual returns)",
y='Average return (annual returns)',
title="Historical return vs. Historical volatility (yearly returns since 2010)") +   theme_solarized() +
geom_point(data = mean_sd[mean_sd$ticker == '^BVSP',], color = "#2986cc", size = 5)
p
reticulate::repl_python()
quit
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
library(dplyr)
library(ggplot2)
library(gganimate)
library(ggthemes)
library(PerformanceAnalytics)
library(tidyr)
library(tidyquant)
library(roll)
library(plotly)
library(yfR)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
start = '2018-06-01'
end = '2023-01-01'
freq_data = '1mo'
ibov_tickers = ["ABEV3.SA","ALPA4.SA","AMER3.SA","B3SA3.SA","BBAS3.SA","BBDC3.SA","BBDC4.SA","BEEF3.SA","BPAN4.SA","BRAP4.SA","BRFS3.SA","BRKM5.SA","BRML3.SA","CCRO3.SA","CIEL3.SA","CMIG4.SA","COGN3.SA","CPFE3.SA","CPLE6.SA","CSAN3.SA","CSNA3.SA","CYRE3.SA","DXCO3.SA","ECOR3.SA","EGIE3.SA","ELET3.SA","ELET6.SA","EMBR3.SA","ENBR3.SA","ENEV3.SA","ENGI11.SA","EQTL3.SA","EZTC3.SA","FLRY3.SA","GGBR4.SA","GOAU4.SA","GOLL4.SA","HYPE3.SA","ITSA4.SA","ITUB4.SA","JBSS3.SA","JHSF3.SA","LREN3.SA","MGLU3.SA","MRFG3.SA","MRVE3.SA","MULT3.SA","PCAR3.SA","PETR3.SA","PETR4.SA","PRIO3.SA","QUAL3.SA","RADL3.SA","RENT3.SA","SANB11.SA","SBSP3.SA","SULA11.SA","SUZB3.SA","TAEE11.SA","TIMS3.SA","TOTS3.SA",  "UGPA3.SA","USIM5.SA","VALE3.SA","VIIA3.SA","VIVT3.SA","WEGE3.SA","YDUQ3.SA"]
ibov = yf.download(tickers="^BVSP", start=start, end=end, interval=freq_data)
asset = yf.download(tickers=ibov_tickers   ,start=start, end=end, interval=freq_data)
ret_ibov = pd.DataFrame(ibov['Adj Close'].pct_change().dropna())
ret_ibov.columns = ['return']
ret_asset = pd.DataFrame()
for col in asset.columns.get_level_values(1).unique():
temp_df = pd.DataFrame(asset['Adj Close'][col].pct_change().dropna())
temp_df.columns = ['return']
temp_df['ticker'] = col.split('.')[0]
ret_asset = pd.concat([ret_asset, temp_df], axis=0)
ret = pd.merge(ret_ibov, ret_asset, on='Date')
# To compute beta
var = pd.DataFrame(ret.groupby('ticker')['return_x'].var())
var = var.rename(columns={"return_x": "variance"})
cov = ret.groupby('ticker')['return_x', 'return_y'].cov().iloc[0::2, 1]
beta = pd.merge(var, cov, on='ticker')
beta.reset_index(inplace=True)
beta.rename(columns={"return_y": "covariance", "return_x": "variance", "ticker": "Ticker"}, inplace=True)
beta = beta[['Ticker', 'variance', 'covariance']]
beta.head()
beta['beta'] = beta['covariance'] / beta['variance']
# Risk free rate
beta['rf'] = 0.1
# Equity risk premium from here: https://ceqef.fgv.br/node/594
beta['erp'] = 0.16
# expected return
beta['ep'] = beta['rf'] + beta['beta'] * beta['erp']
plt.close()
plt.figure(figsize=(20,10))
beta = beta.sort_values('beta', ascending=True)
fig, ax = plt.subplots(figsize=(20,10))
ax.barh(beta['Ticker'], beta['beta'], color='#268bd2')
ax.set_title('Betas Brazilian companies, monthly data (2018-2023)', fontsize=25)
ax.set_xlabel('Beta', fontsize=20)
ax.set_ylabel('Ticker', fontsize=20)
plt.xticks(rotation=90, fontsize=7)
plt.tight_layout()
ax.tick_params(axis='x', labelsize=14)
plt.show()
