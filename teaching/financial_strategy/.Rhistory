#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
p<-ggplot(ibov,aes(ibov$ref_date,ibov$ret_closing_prices))+
geom_line(color='#2986cc') +
labs(x = "",
y='Daily returns',
title="IBOV (Daily returns since 2010)")   +   theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
p<-ggplot() +
geom_line(data=amer, aes(amer$ref_date, amer$ret_closing_prices), color='#801e00') +
geom_line(data=ibov, aes(ibov$ref_date, ibov$ret_closing_prices), color='#2986cc') +
labs(x = "", y='Daily returns') +
ggtitle("IBOV vs AMER3 (Daily returns since 2010)") +
theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
start <-'2010-01-01'
end   <- Sys.Date()
asset <- yf_collection_get("IBOV",
first_date = start,
last_date = end,
thresh_bad_data = 0.5,
freq_data ="yearly")
asset<-asset[complete.cases(asset),]
stocks <-c('^BVSP' )
ibov <- yf_get(tickers = stocks,
first_date = start,
last_date = end,
freq_data ="yearly")
ibov<-ibov[complete.cases(ibov),]
data<-rbind(asset,ibov)
mean_sd  <- data %>%
group_by(ticker) %>%
summarise_at(vars(ret_adjusted_prices),
list(mean = mean,
sd = sd)) %>%
as.data.frame()
p<-ggplot(mean_sd, aes(x=sd, y=mean)) +
ggrepel::geom_text_repel(data = mean_sd, aes(label = ticker) , size = 2.5 ,  max.overlaps = Inf)+
geom_point(size = 4)  +   xlim(0, 1) + ylim(0, 0.35) +
labs(x = "Average standard deviation (annual returns)",
y='Average return (annual returns)',
title="Historical return vs. Historical volatility (yearly returns since 2010)") +   theme_solarized() +
geom_point(data = mean_sd[mean_sd$ticker == '^BVSP',], color = "#2986cc", size = 5)
p
reticulate::repl_python()
quit
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
library(dplyr)
library(ggplot2)
library(gganimate)
library(ggthemes)
library(PerformanceAnalytics)
library(tidyr)
library(tidyquant)
library(roll)
library(plotly)
library(yfR)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
start = '2018-06-01'
end = '2023-01-01'
freq_data = '1mo'
ibov_tickers = ["ABEV3.SA","ALPA4.SA","AMER3.SA","B3SA3.SA","BBAS3.SA","BBDC3.SA","BBDC4.SA","BEEF3.SA","BPAN4.SA","BRAP4.SA","BRFS3.SA","BRKM5.SA","BRML3.SA","CCRO3.SA","CIEL3.SA","CMIG4.SA","COGN3.SA","CPFE3.SA","CPLE6.SA","CSAN3.SA","CSNA3.SA","CYRE3.SA","DXCO3.SA","ECOR3.SA","EGIE3.SA","ELET3.SA","ELET6.SA","EMBR3.SA","ENBR3.SA","ENEV3.SA","ENGI11.SA","EQTL3.SA","EZTC3.SA","FLRY3.SA","GGBR4.SA","GOAU4.SA","GOLL4.SA","HYPE3.SA","ITSA4.SA","ITUB4.SA","JBSS3.SA","JHSF3.SA","LREN3.SA","MGLU3.SA","MRFG3.SA","MRVE3.SA","MULT3.SA","PCAR3.SA","PETR3.SA","PETR4.SA","PRIO3.SA","QUAL3.SA","RADL3.SA","RENT3.SA","SANB11.SA","SBSP3.SA","SULA11.SA","SUZB3.SA","TAEE11.SA","TIMS3.SA","TOTS3.SA",  "UGPA3.SA","USIM5.SA","VALE3.SA","VIIA3.SA","VIVT3.SA","WEGE3.SA","YDUQ3.SA"]
ibov = yf.download(tickers="^BVSP", start=start, end=end, interval=freq_data)
asset = yf.download(tickers=ibov_tickers   ,start=start, end=end, interval=freq_data)
ret_ibov = pd.DataFrame(ibov['Adj Close'].pct_change().dropna())
ret_ibov.columns = ['return']
ret_asset = pd.DataFrame()
for col in asset.columns.get_level_values(1).unique():
temp_df = pd.DataFrame(asset['Adj Close'][col].pct_change().dropna())
temp_df.columns = ['return']
temp_df['ticker'] = col.split('.')[0]
ret_asset = pd.concat([ret_asset, temp_df], axis=0)
ret = pd.merge(ret_ibov, ret_asset, on='Date')
# To compute beta
var = pd.DataFrame(ret.groupby('ticker')['return_x'].var())
var = var.rename(columns={"return_x": "variance"})
cov = ret.groupby('ticker')['return_x', 'return_y'].cov().iloc[0::2, 1]
beta = pd.merge(var, cov, on='ticker')
beta.reset_index(inplace=True)
beta.rename(columns={"return_y": "covariance", "return_x": "variance", "ticker": "Ticker"}, inplace=True)
beta = beta[['Ticker', 'variance', 'covariance']]
beta.head()
beta['beta'] = beta['covariance'] / beta['variance']
# Risk free rate
beta['rf'] = 0.1
# Equity risk premium from here: https://ceqef.fgv.br/node/594
beta['erp'] = 0.16
# expected return
beta['ep'] = beta['rf'] + beta['beta'] * beta['erp']
plt.close()
plt.figure(figsize=(20,10))
beta = beta.sort_values('beta', ascending=True)
fig, ax = plt.subplots(figsize=(20,10))
ax.barh(beta['Ticker'], beta['beta'], color='#268bd2')
ax.set_title('Betas Brazilian companies, monthly data (2018-2023)', fontsize=25)
ax.set_xlabel('Beta', fontsize=20)
ax.set_ylabel('Ticker', fontsize=20)
plt.xticks(rotation=90, fontsize=7)
plt.tight_layout()
ax.tick_params(axis='x', labelsize=14)
plt.show()
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
library(dplyr)
library(ggplot2)
library(gganimate)
library(ggthemes)
library(PerformanceAnalytics)
library(tidyr)
library(tidyquant)
library(roll)
library(plotly)
library(yfR)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: false
start <-'2015-01-01'
end   <-'2023-08-20'
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start,last_date = end,freq_data = "monthly")
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
library(dplyr)
library(ggplot2)
library(gganimate)
library(ggthemes)
library(PerformanceAnalytics)
library(tidyr)
library(tidyquant)
library(roll)
library(plotly)
library(yfR)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(PerformanceAnalytics)
library(yfR)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggthemes)
library(tidyquant)
library(roll)
library(plotly)
library(ggthemes)
stocks <-c('BBDC3.SA', 'PETR3.SA')
start <-'2010-01-01'
end   <-Sys.Date()
data <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
data<-data[complete.cases(data),]
p<-ggplot(data, aes(ref_date , price_close, group=ticker , color=ticker))+
geom_line() +
labs(x = "",
y='Closing prices',
title="Two assets returns",
subtitle = "Begin 01/01/2010") +   theme_solarized()
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from scipy.stats import norm
stocks = ['BBDC3.SA', 'PETR3.SA']
start = '2010-01-01'
end = pd.Timestamp.today().strftime('%Y-%m-%d')
data = yf.download(stocks, start=start, end=end)['Close']
data = data.dropna()
# plot the data
plt.close()
plt.plot(data.index, data['BBDC3.SA'], label='BBDC3.SA')
plt.plot(data.index, data['PETR3.SA'], label='PETR3.SA')
# add title and axis labels
plt.title('Two assets returns')
plt.xlabel('Date')
plt.ylabel('Closing prices')
# add legend
plt.legend()
# display the plot
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stock1 <- subset(data, ticker == stocks[1])
stock2 <- subset(data, ticker == stocks[2])
stock1$price_close2 <- stock1$price_close  / stock1$price_close[1] * 100
stock2$price_close2 <- stock2$price_close  / stock2$price_close[1] * 100
p<-ggplot(stock1, aes(ref_date , price_close2, color=ticker))+
geom_line() +
geom_line(data=stock2) +
labs(x = "",
y='Closing prices',
title="Two assets returns, Initial price = 100",
subtitle = "Begin 01/01/2010") +   theme_solarized()
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
plt.close()
stock1 = data[stocks[0]]
stock2 = data[stocks[1]]
stock1 = (stock1 / stock1.iloc[0]) * 100
stock2 = (stock2 / stock2.iloc[0]) * 100
fig, ax = plt.subplots()
ax.plot(stock1.index, stock1.values, label=stocks[0])
ax.plot(stock2.index, stock2.values, label=stocks[1])
ax.set_ylabel('Price')
ax.set_title('Two assets returns, Initial price = 100')
ax.legend()
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
# Defining weights and calculating portfolio return (daily)
w <- c(0.40, 0.60)
# Creating a df with stocks and weights
w_tbl <- tibble(ticker = stocks,w = w)
# Including the weights in the df prices (which contains the prices)
prices  <- left_join(data ,w_tbl, by = 'ticker')
# calculating the product of return times the portfolio weights for all days (this is necessary to calculate average return)
prices$w_ret <- prices$ret_closing_prices * prices$w
# Creating a dataframe with portfolio returns
port_ret <- prices %>%
group_by(ref_date) %>%
summarise(port_ret = sum(w_ret))
# Creating prices from the vector of returns
port_ret$price_close2 <- cumprod(1+port_ret$port_ret) * 100
# Graph with all returns
port_ret$ticker <- 'Portfolio'
p <- ggplot(stock1, aes(ref_date , price_close2, color = ticker))+
geom_line() +geom_line(data=stock2) +geom_line(data=port_ret) +
labs(x = "",
y='Closing prices',
title="Two assets and Portfolio returns, Initial price = 100",
subtitle = "Begin 01/01/2010") +   theme_solarized()
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
plt.close()
w = [0.40, 0.60]
# Calculate the weighted returns for each stock
returns = data.pct_change().dropna()
weighted_returns = returns.mul(w, axis=1)
# Calculate the portfolio returns by taking the sum of the weighted returns
portfolio_returns = weighted_returns.sum(axis=1)
# Calculate the cumulative returns for each series
stock_returns_cum = (1 + returns).cumprod() * 100
portfolio_returns_cum = (1 + portfolio_returns).cumprod() * 100
# Plot the results
fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(stock_returns_cum)
ax.plot(portfolio_returns_cum, label='Portfolio')
ax.set(title='Two assets and Portfolio returns, Initial price = 100', xlabel='', ylabel='Closing prices')
ax.legend()
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: false
start <-'2015-01-01'
end   <-'2023-08-20'
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start,last_date = end,freq_data = "monthly")
View(data_temp)
tickers<-unique(data_temp$ticker)
df <- data_temp %>%  select(ref_date)  %>% distinct()
# Now collecting data
for (i in 1:length(tickers)) {
data <- yf_get(tickers[[i]],first_date = start,last_date = end,freq_data = "monthly")
data <- data[complete.cases(data),]
data <- data %>%  select(ref_date, ret_closing_prices)
colnames(data) <- c("ref_date",  tickers[[i]]  )
df <- merge(df,data,by="ref_date")
}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: false
start <-'2015-01-01'
end   <-'2023-08-20'
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start, last_date = end, freq_data = "monthly")
tickers<-unique(data_temp$ticker)
df <- data_temp %>%  select(ref_date)  %>% distinct()
# Now collecting data
for (i in 1:length(tickers)) {
data <- yf_get(tickers[[i]],first_date = start,last_date = end,freq_data = "monthly")
data <- data[complete.cases(data),]
data <- data %>%  select(ref_date, ret_closing_prices)
colnames(data) <- c("ref_date",  tickers[[i]]  )
df <- merge(df,data,by="ref_date")
}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: false
start <-'2015-01-01'
end   <-'2023-08-20'
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start, last_date = end, freq_data = "monthly")
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start, last_date = end, freq_data = "monthly")
tickers<-unique(data_temp$ticker)
df <- data_temp %>%  select(ref_date)  %>% distinct()
#| warning: false
#| error: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: false
start <-'2015-01-01'
end   <-'2023-08-20'
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start, last_date = end, freq_data = "monthly")
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start, last_date = end, freq_data = "monthly")
tickers<-unique(data_temp$ticker)
df <- data_temp %>%  select(ref_date)  %>% distinct()
# Now collecting data
for (i in 1:length(tickers)) {
data <- yf_get(tickers[[i]],first_date = start,last_date = end,freq_data = "monthly")
data <- data[complete.cases(data),]
data <- data %>%  select(ref_date, ret_closing_prices)
colnames(data) <- c("ref_date",  tickers[[i]]  )
df <- merge(df,data,by="ref_date")
}
#| warning: false
#| error: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: false
start <-as.Date('2015-01-01')
end   <-as.Date('2023-08-20')
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start, last_date = end, freq_data = "monthly")
tickers<-unique(data_temp$ticker)
df <- data_temp %>%  select(ref_date)  %>% distinct()
# Now collecting data
for (i in 1:length(tickers)) {
data <- yf_get(tickers[[i]],first_date = start,last_date = end,freq_data = "monthly")
data <- data[complete.cases(data),]
data <- data %>%  select(ref_date, ret_closing_prices)
colnames(data) <- c("ref_date",  tickers[[i]]  )
df <- merge(df,data,by="ref_date")
}
View(data)
#| warning: false
#| error: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: false
start <-'2015-01-01'
end   <-'2023-12-01'
# Finding the tickers
data_temp <- yf_collection_get("IBOV", first_date = start, last_date = end, freq_data = "monthly")
tickers<-unique(data_temp$ticker)
df <- data_temp %>%  select(ref_date)  %>% distinct()
# Now collecting data
for (i in 1:length(tickers)) {
data <- yf_get(tickers[[i]],first_date = start,last_date = end,freq_data = "monthly")
data <- data[complete.cases(data),]
data <- data %>%  select(ref_date, ret_closing_prices)
colnames(data) <- c("ref_date",  tickers[[i]]  )
df <- merge(df,data,by="ref_date")
}
View(data)
View(data_temp)
View(df)
View(data_temp)
```{r}
