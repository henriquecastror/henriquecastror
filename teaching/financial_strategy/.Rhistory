safe_num <- function(x, default = 0) {
if (is.null(x) || length(x) == 0 || is.na(as.numeric(x))) return(default)
as.numeric(x)
}
safe_chr <- function(x, default = "") {
if (is.null(x) || length(x) == 0 || is.na(x)) return(default)
as.character(x)
}
SQL_ATTENDANCE_STUDENT <- "
SELECT
attended                    AS classes_present,
total_classes,
ROUND(100.0 * attended / NULLIF(total_classes,0), 0) AS attendance_rate
FROM v_attendance
WHERE student_id = ?;
"
SQL_ATTENDANCE_AVG <- "
SELECT
ROUND(AVG(attended), 0) AS avg_classes_present,
ROUND(AVG(100.0 * attended / NULLIF(total_classes,0)), 0) AS avg_attendance_rate
FROM v_attendance;
"
SQL_LOGINS_STUDENT <- "
-- Exemplo: agregados de logins por aluno; ajuste para sua view real (ex.: v_logins_summary)
SELECT
COUNT(*) AS total_logins
FROM logins
WHERE student = ?;
"
SQL_LOGINS_TOP_PATHS <- "
-- Top 3 paths do aluno por contagem
SELECT path, COUNT(*) AS hits
FROM logins
WHERE student = ?
GROUP BY path
ORDER BY hits DESC, path ASC
LIMIT 3;
"
SQL_LOGINS_AVG <- "
-- Médias da turma: ajuste se tiver uma view com métricas já calculadas
SELECT
ROUND(AVG(cnt), 0) AS avg_total_logins
FROM (
SELECT student, COUNT(*) AS cnt
FROM logins
GROUP BY student
) t;
"
# Se você já tem uma view “v_scores_summary” por aluno, use-a no lugar destas 3.
SQL_SCORES_STUDENT <- "
SELECT
COALESCE(likes_points, 0)     AS likes_points,
COALESCE(checkouts_points, 0) AS checkouts_points,
COALESCE(exercises_points, 0) AS exercises_points,
COALESCE(likes_points, 0) + COALESCE(checkouts_points, 0) + COALESCE(exercises_points, 0) AS total_points
FROM ranking_score_total
WHERE student_id = ?;
"
SQL_SCORES_AVG <- "
SELECT
ROUND(AVG(likes_points), 0)     AS avg_likes_points,
ROUND(AVG(checkouts_points), 0) AS avg_checkouts_points,
ROUND(AVG(exercises_points), 0) AS avg_exercises_points,
ROUND(AVG(likes_points + checkouts_points + exercises_points), 0) AS avg_total_points
FROM ranking_score_total;
"
SQL_RANKING_TOP10 <- "
SELECT
ROW_NUMBER() OVER (ORDER BY total_points DESC, exercises_points DESC, checkouts_points DESC, likes_points DESC) AS rank,
student_id AS student,
total_points AS points,
checkouts_points AS checkouts,
exercises_points AS exercises,
likes_points AS likes
FROM ranking_score_total
ORDER BY points DESC, exercises DESC, checkouts DESC, likes DESC
LIMIT 10;
"
# Checkouts do aluno para o “snapshot” do lote (edite as datas do período se quiser filtrar)
# Aqui uso tudo “até o fim do dia do lote” no timezone já normalizado na D1 (ou guardado em UTC e convertido).
SQL_CHECKOUTS_STUDENT <- "
SELECT
DATE(timestamp, 'localtime')                                      AS date_label,
strftime('%d/%m/%Y %H:%M', timestamp, 'localtime')               AS ts_br,
slide_id                                                         AS exercise_id,
ticket                                                           AS ticket
FROM checkouts
WHERE student_id = ?
AND timestamp <= DATETIME(?, 'localtime', '23:59:59')
ORDER BY timestamp DESC
LIMIT 5;
"
# Attendance (aluno)
att_row <- d1_query(SQL_ATTENDANCE_STUDENT, params = list(student_login))
avg_attendance_rate  <- if (length(att_avg)) safe_num(att_avg[[1]]$avg_attendance_rate, 0) else 0
# Logins (aluno)
lg_row <- d1_query(SQL_LOGINS_STUDENT, params = list(student_login))
# Top 3 paths do aluno
top_rows <- d1_query(SQL_LOGINS_TOP_PATHS, params = list(student_login))
top1_hits <- safe_num(if (length(top_rows)>=1) top_rows[[1]]$hits else 0, 0)
top2_path <- safe_chr(if (length(top_rows)>=2) top_rows[[2]]$path else "", "/")
top2_hits <- safe_num(if (length(top_rows)>=2) top_rows[[2]]$hits else 0, 0)
top3_path <- safe_chr(if (length(top_rows)>=3) top_rows[[3]]$path else "", "/")
top3_hits <- safe_num(if (length(top_rows)>=3) top_rows[[3]]$hits else 0, 0)
# Logins (média)
lg_avg <- d1_query(SQL_LOGINS_AVG)
logins_per_week      <- 0
logins_per_month     <- 0
avg_logins_per_week  <- 0
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("render_one_from_d1.R")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
# ==========================
# Ingestão de exercícios (.qmd) -> D1 (via Worker)
# - Renderiza QMD ao lado do arquivo (sem misturar drives)
# - Usa seed SOMENTE para questões numéricas (e somente se você fornecer)
# - Extrai gabaritos do HTML (id, data-correct-answer, data-tolerance)
# - Publica:
#     (1) /exercises/answer-key  (chave canônica por question_id/part_id)
#     (2) /exercises/templates   (catálogo por question_id)
#     (3) /exercises/instances   (instâncias concretas com html + keys)
# ==========================
# -------- Configurações principais --------
ENDPOINT_ANSWER_KEY <- "https://course-chat.hcmrtns.workers.dev/exercises/answer-key"
ENDPOINT_TEMPL      <- "https://course-chat.hcmrtns.workers.dev/exercises/templates"
ENDPOINT_INST       <- "https://course-chat.hcmrtns.workers.dev/exercises/instances"
ADMIN_TOKEN_ENV     <- "ADMIN_TOKEN"   # defina no seu ambiente
USE_POINTS_LOCAL    <- TRUE            # se FALSE, envia points = NULL (centralize em D1)
POINTS_BY_TYPE      <- list(tf = 1L, mcq = 1L, num = 2L, long = 5L)
# Liste aqui os arquivos do lote (caminhos relativos ao repo)
#FILES <- c( "module4/num/module4_num_q16.qmd")
#FILE_META <- list(  "module4/num/module4_num_q16.qmd"   = list(module = "mod4", slideid = "module4_num_qu3", seeds = NA) )
# ==== LOTE TF: varrer pasta e montar FILES + FILE_META ====
library(fs)
# 1) Liste todos os .qmd dentro da pasta TF
TF_DIR <- "module4/tf"                    # <- ajuste aqui
FILES  <- fs::dir_ls(TF_DIR, recurse = TRUE, glob = "*.qmd")
if (length(FILES) == 0) stop("Nenhum .qmd encontrado em: ", TF_DIR)
# 2) Derivar metadados padrão
# - module: derivado do caminho (ex.: "module4" -> "mod4")
# - slideid: por padrão, usa o nome do arquivo sem extensão (ex.: module4_tf_q101)
FILE_META <- lapply(FILES, function(p) {
mod_folder <- basename(dirname(p))                    # "tf"
mod_root   <- basename(dirname(dirname(p)))           # "module4"
module_tag <- tolower(gsub("^module(\\d+)$", "mod\\1", mod_root))
list(
module  = module_tag,                               # ex.: "mod4"
slideid = path_ext_remove(path_file(p)),            # ex.: "module4_tf_q101"
seeds   = NA                                        # TF não usa seed
)
})
names(FILE_META) <- FILES
# 3) (Opcional) Forçar TODO o lote para o MESMO slideid
# Descomente se quiser agrupar todos os TF em um único slide
# for (nm in names(FILE_META)) FILE_META[[nm]]$slideid <- "module4_tf_slide1"
# Confere acoplamento 1:1 (requisito do run_ingest_batch)
stopifnot(setequal(FILES, names(FILE_META)))
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
getwd()
# POST para /exercises/templates
post_templates <- function(items, endpoint = ENDPOINT_TEMPL, token = admin_token) {
req <- httr2::request(endpoint) |>
httr2::req_method("POST") |>
httr2::req_headers(
"Authorization" = paste("Bearer", trimws(token)),
"Content-Type"  = "application/json"
) |>
httr2::req_body_json(list(items = items)) |>
httr2::req_retry(max_tries = 3, backoff = ~ 0.6 * (2 ^ .x))
resp <- httr2::req_perform(req)
list(
status = httr2::resp_status(resp),
body   = tryCatch(httr2::resp_body_string(resp), error = function(e) ""),
json   = tryCatch(httr2::resp_body_json(resp),  error = function(e) NULL)
)
}
# 2) Templates (catálogo)
tpl_items <- build_templates_payload(FILES, FILE_META)
cat("\n=== Publicando templates ===\n")
res_tpl <- post_templates(tpl_items)
cat("Body:", substr(res_tpl$body, 1, 1000), "\n")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
# 3) Instances (html + chaves por parte)
inst_items <- build_instances_payload(FILES, FILE_META)
cat("\n=== Publicando instances ===\n")
cat(substr(post_instances(inst_items), 1, 800), "\n")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(API_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
> Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
> Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
> Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
cat(substr(post_instances(inst_items), 1, 800), "\n")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
library(httr2)
url <- "https://course-chat.hcmrtns.workers.dev"  # ajuste p/ seu endpoint final
# 1) Teste mínimo de reachability (GET) forçando IPv4 e com timeout maior
req <- request(url) |>
req_options(ipresolve = 1L) |>        # força IPv4 (equivale a curl --ipv4)
req_timeout(30) |>                    # 30s p/ handshake + resposta
req_retry(max_tries = 3, backoff = ~ min(30, 2^.x))  # 3 tentativas com backoff
resp <- req_perform(req)
library(httr2)
request("https://course-chat.hcmrtns.workers.dev/health") |>
req_options(ipresolve = 1L) |>
req_timeout(20) |>
req_perform() |>
resp_body_json()
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
assim: Sys.setenv(API_TOKEN = "18317799tgA!")
Sys.setenv(API_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(API_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
ENDPOINT_ANSWER_KEY <- paste0(ENDPOINT_BASE, "/exercises/answer-key")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Set.Setenv(ADMIN_TOKEN = "18317799tgA!")
Sys.Setenv(ADMIN_TOKEN = "18317799tgA!")
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
getwd()
# ======== CONFIGURAÇÃO MÍNIMA ========
QMD_DIR <- "module1/mcq"  # <<< ajuste a pasta com seus .qmd de MCQ
# ======== CONFIGURAÇÃO MÍNIMA ========
QMD_DIR <- "module1/mcq"  # <<< ajuste a pasta com seus .qmd de MCQ
ENDPOINT_BASE       <- "https://course-chat.hcmrtns.workers.dev"
ENDPOINT_ANSWER_KEY <- paste0(ENDPOINT_BASE, "/exercises/answer-key")
ENDPOINT_TEMPL      <- paste0(ENDPOINT_BASE, "/exercises/templates")
PING_URL            <- paste0(ENDPOINT_BASE, "/admin/ping")
ADMIN_TOKEN_ENV     <- "ADMIN_TOKEN"     # defina antes: Sys.setenv(ADMIN_TOKEN = "seu_token")
# Política de lotes/pausas
BATCH_SIZE          <- 10L               # fixo: 10
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
getwd()
---
params:
endpoint: "https://course-chat.hcmrtns.workers.dev/exercises/answer-key"
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
---
params:
endpoint: "https://course-chat.hcmrtns.workers.dev/exercises/answer-key"
#| echo: false
#| message: false
# Helper: função para enviar payload
send_answer_key <- function(payload, endpoint) {
if (!requireNamespace("httr2", quietly = TRUE)) {
stop("Pacote 'httr2' não instalado. Instale com install.packages('httr2').")
}
admin_token <- Sys.getenv("ADMIN_TOKEN", unset = NA)
if (is.na(admin_token) || admin_token == "") {
stop("Variável de ambiente ADMIN_TOKEN não definida.")
}
req <- httr2::request(endpoint) |>
httr2::req_method("POST") |>
httr2::req_headers(
"content-type" = "application/json",
"x-admin-token" = admin_token
) |>
httr2::req_body_json(payload)
resp <- httr2::req_perform(req)
list(
status = httr2::resp_status(resp),
body   = tryCatch(httr2::resp_body_string(resp), error = function(e) "")
)
}
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q1a",
qtype         = "num",
correct_value = -0.04,   # número (use ponto decimal)
tolerance     = 0.01,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q1b",
qtype         = "num",
correct_value = 2.90,   # número (use ponto decimal)
tolerance     = 0.01,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q1c",
qtype         = "num",
correct_value = 2.15,   # número (use ponto decimal)
tolerance     = 0.01,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q6a",
qtype         = "num",
correct_value = 8.86,   # número (use ponto decimal)
tolerance     = 0.1,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q6b",
qtype         = "num",
correct_value = 0.6,   # número (use ponto decimal)
tolerance     = 0.01,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q1a",
qtype         = "num",
correct_value = -0.04,   # número (use ponto decimal)
tolerance     = 0.05,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q1b",
qtype         = "num",
correct_value = 2.90,   # número (use ponto decimal)
tolerance     = 0.1,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q1c",
qtype         = "num",
correct_value = 2.15,   # número (use ponto decimal)
tolerance     = 0.1,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q6a",
qtype         = "num",
correct_value = 8.86,   # número (use ponto decimal)
tolerance     = 0.1,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q6a",
qtype         = "num",
correct_value = 8.86,   # número (use ponto decimal)
tolerance     = 0.1,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
#| echo: false
payload <- list(
slide_id = "module5_num_qu1",
items = list(list(
question_id   = "module5_num_q6b",
qtype         = "num",
correct_value = 0.6,   # número (use ponto decimal)
tolerance     = 0.1,    # tolerância absoluta; NULL se não houver
points        = 2,
module        = "mod5"
))
)
res <- send_answer_key(payload, params$endpoint)
cat("→ module5_num_q301 | HTTP:", res$status, "\n", res$body)
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN="18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_all.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN="18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_all.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_all.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_all.R", echo=TRUE)
getwd()
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_tf.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN="18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/ingest_exercises_tf.R", echo=TRUE)
