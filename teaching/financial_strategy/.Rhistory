getwd()
dados_sgs <- GetBCBData::gbcbd_get_series(
id = 432,
first.date = "2020-01-01",
last.date = Sys.Date()
)
View(dados_sgs)
View(dados_sgs)
ui <- fluidPage(
titlePanel("Cumulative Returns of Ibov and Selic"),
sidebarLayout(
sidebarPanel(
helpText("Select the date range for analysis"),
# Date inputs for start and end date
dateInput("start_date", "Start Date:",
value = '1995-01-01', format = "yyyy-mm-dd"),
dateInput("end_date", "End Date:",
value = Sys.Date(), format = "yyyy-mm-dd")
),
mainPanel(
plotlyOutput("cumulative_plot")
)
)
)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(shiny)
ui <- fluidPage(
titlePanel("Cumulative Returns of Ibov and Selic"),
sidebarLayout(
sidebarPanel(
helpText("Select the date range for analysis"),
# Date inputs for start and end date
dateInput("start_date", "Start Date:",
value = '1995-01-01', format = "yyyy-mm-dd"),
dateInput("end_date", "End Date:",
value = Sys.Date(), format = "yyyy-mm-dd")
),
mainPanel(
plotlyOutput("cumulative_plot")
)
)
)
server <- function(input, output) {
output$cumulative_plot <- renderPlotly({
# Define the user-selected start and end dates
start <- input$start_date
end <- input$end_date
# Download Ibov data based on selected dates
stock <- '^BVSP'
ibov <- yf_get(tickers = stock, first_date = start, last_date = end)
ibov <- ibov[order(as.numeric(ibov$ref_date)),]
ibov$Ibov_return <- ibov$cumret_adjusted_prices - 1
# Download Selic data
#selic <- read_excel("files/selic.xls")
#names(selic) <- c("ref_date", "selic")
#selic$ref_date <- as.Date(selic$ref_date, format = "%d/%m/%Y")
#selic <- na.omit(selic)
#selic$selic <- selic$selic / (252 * 100)
selic <- GetBCBData::gbcbd_get_series(
id = 432,
first.date = start,
last.date = end
)
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date, format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252 * 100)
return_selic <- data.frame(nrow(selic):1)
colnames(return_selic) <- "selic_return"
for(i in (2:nrow(selic))) {
return_selic[i, 1] <- Return.cumulative(selic$selic[1:i])
}
selic <- cbind(selic, return_selic)
df <- merge(ibov, selic, by = c("ref_date"), all = TRUE)
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
View(ui)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(shiny)
ui <- fluidPage(
titlePanel("Cumulative Returns of Ibov and Selic"),
sidebarLayout(
sidebarPanel(
helpText("Select the date range for analysis"),
# Date inputs for start and end date
dateInput("start_date", "Start Date:",
value = '1995-01-01', format = "yyyy-mm-dd"),
dateInput("end_date", "End Date:",
value = Sys.Date(), format = "yyyy-mm-dd")
),
mainPanel(
plotlyOutput("cumulative_plot")
)
)
)
server <- function(input, output) {
output$cumulative_plot <- renderPlotly({
# Define the user-selected start and end dates
start <- input$start_date
end <- input$end_date
# Download Ibov data based on selected dates
stock <- '^BVSP'
ibov <- yf_get(tickers = stock, first_date = start, last_date = end)
ibov <- ibov[order(as.numeric(ibov$ref_date)),]
ibov$Ibov_return <- ibov$cumret_adjusted_prices - 1
selic <- GetBCBData::gbcbd_get_series(
id = 432,
first.date = start,
last.date = end
)
names(selic) <- c("ref_date", "selic")
selic$ref_date <- as.Date(selic$ref_date, format = "%d/%m/%Y")
selic <- na.omit(selic)
selic$selic <- selic$selic / (252 * 100)
return_selic <- data.frame(nrow(selic):1)
colnames(return_selic) <- "selic_return"
for(i in (2:nrow(selic))) {
return_selic[i, 1] <- Return.cumulative(selic$selic[1:i])
}
# Merging dataframes
selic <- cbind(selic, return_selic)
df <- merge(ibov, selic, by = c("ref_date"), all = TRUE)
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
table(is.na(df$Ibov_return))
table(is.na(df$selic_return))
p <- ggplot(df, aes(ref_date)) +
geom_line(aes(y = Ibov_return, colour = "Ibov")) +
geom_line(aes(y = selic_return, colour = "Selic")) +
labs(y = 'Cumulative return (daily)') +
theme_solarized() +
ggtitle(paste("Cumulative Returns for Ibov and Selic",
paste("from", start, "to", end)))
ggplotly(p)
})
}
shinyApp(ui, server)
# install.packages("shiny")
install.packages("rmarkdown")
install.packages('rsconnect')
install.packages("rsconnect")
#| echo: false
rsconnect::setAccountInfo(name='henriquemartins',
token='6C13DD88FBEAB0403B7F0B26F4C3147D',
secret='xJ5bG7LJG6qE9hs2sIxL38b1NsGGCJTAxL3Em17P')
rsconnect::deployApp('p2shiny.qmd')
library(shiny); runApp('p2shiny.R')
