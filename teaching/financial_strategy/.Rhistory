#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
# Install and load required packages
if (!requireNamespace("shiny", quietly = TRUE)) {
install.packages("shiny")
}
library(shiny)
library(downloader)
library(dplyr)
library(GetQuandlData)
library(ggplot2)
library(ggthemes)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(tidyr)
library(tidyquant)
library(yfR)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("Cumulative Returns Dashboard"),
sidebarLayout(
sidebarPanel(
fileInput("selicFile", "Upload Selic Data (Excel)", accept = c(".xls")),
br(),
dateRangeInput("dateRange", "Select Date Range", start = "1995-01-01", end = Sys.Date())
),
mainPanel(
plotlyOutput("cumulativeReturnsPlot")
)
)
)
# Define the server logic
server <- function(input, output) {
# Load Selic data from the uploaded file
selic <- reactive({
req(input$selicFile)
inFile <- input$selicFile
selic_data <- read_excel(inFile$datapath)
names(selic_data) <- c("ref_date", "selic")
selic_data$ref_date <- as.Date(selic_data$ref_date, format = "%d/%m/%Y")
selic_data <- na.omit(selic_data)
selic_data$selic <- selic_data$selic / (252 * 100)
return(selic_data)
})
# Load Ibov data using yfR
ibov <- reactive({
stock <- '^BVSP'
start <- input$dateRange[1]
end <- input$dateRange[2]
ibov_data <- yf_get(tickers = stock, first_date = start, last_date = end)
ibov_data <- ibov_data[order(as.numeric(ibov_data$ref_date)), ]
ibov_data$Ibov_return <- ibov_data$cumret_adjusted_prices - 1
return(ibov_data)
})
# Merge and calculate cumulative returns
df <- reactive({
selic_data <- selic()
ibov_data <- ibov()
return_selic <- data.frame(nrow(selic_data):1)
colnames(return_selic) <- "selic_return"
for (i in 2:nrow(selic_data)) {
return_selic[i, 1] <- Return.cumulative(selic_data$selic[1:i])
}
selic_data <- cbind(selic_data, return_selic)
df <- merge(ibov_data, selic_data, by = c("ref_date"))
df$selic_return[1] <- NA
df$Ibov_return[1] <- NA
return(df)
})
# Generate the cumulative returns plot
output$cumulativeReturnsPlot <- renderPlotly({
df_data <- df()
p <- ggplot(df_data, aes(ref_date)) +
geom_line(aes(y = Ibov_return, colour = "Ibov")) +
geom_line(aes(y = selic_return, colour = "Selic")) +
labs(y = 'Cumulative return (daily)') +
theme_solarized() +
ggtitle("Cumulative Returns Ibov, and Selic (1995-2023)")
ggplotly(p)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
#| include: false
#| warning: false
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(downloader)
library(dplyr)
library(ggthemes)
library(ggplot2)
library(tidyr)
library(tidyquant)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(yfR)
# Load required libraries
library(shiny)
library(ggplot2)
# Define the UI
ui <- fluidPage(
titlePanel("Beta Coefficient Exploration"),
sidebarLayout(
sidebarPanel(
sliderInput("datapoints", "Number of Datapoints", min = 10, max = 100, value = 50),
width = 3
),
mainPanel(
plotOutput("regression_plot"),
verbatimTextOutput("beta_output")
)
)
)
# Define the server
server <- function(input, output) {
# Generate random data based on the number of datapoints
data <- reactive({
set.seed(42)
x <- rnorm(input$datapoints)
y <- 2 * x + rnorm(input$datapoints)
data.frame(x = x, y = y)
})
# Perform linear regression and plot
output$regression_plot <- renderPlot({
model <- lm(y ~ x, data = data())
ggplot(data(), aes(x, y)) +
geom_point() +
geom_abline(intercept = coef(model)[1], slope = coef(model)[2], color = "red") +
labs(title = "Linear Regression",
x = "X",
y = "Y")
})
# Output the beta coefficient
output$beta_output <- renderText({
model <- lm(y ~ x, data = data())
paste("Beta (slope) coefficient: ", round(coef(model)[2], 4))
})
}
# Run the app
shinyApp(ui, server)
