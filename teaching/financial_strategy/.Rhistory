selic['selic'] = selic['selic'] / (252 * 100)
# Merge dataframes
df = pd.merge(ibov, selic, on="ref_date")
# Plot data
fig, ax = plt.subplots(figsize=(10,5))
ax.plot(df["ref_date"], df["Ibov_return"], label='Ibov')
ax.plot(df["ref_date"], df["selic_return"], label='Ibov')
plt.ylabel('Cumulative return (daily)', fontsize=13)
plt.title('Cumulative Returns  Ibov, and Selic (1995-2023)', fontsize=15)
plt.xlabel('Date', fontsize=13)
plt.legend(loc='upper left')
plt.show()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
# Define API key and other parameters
import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
import numpy as np
import seaborn as sns
stock = "^BVSP"
start = "1995-01-01"
end = pd.Timestamp.now()
# Get data for IBOV
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Value': 'Ibovespa'})
ibov["return"] = ibov["Adj Close"].pct_change()
ibov['Ibov_return'] = (1 + ibov['return']).cumprod()
ibov = ibov[['ref_date','Ibov_return']]
# Get data for Selic
selic = pd.read_excel("files/selic.xls")
selic.columns = ["ref_date", "selic"]
selic['ref_date'] = pd.to_datetime(selic['ref_date'], format="%d/%m/%Y")
selic = selic.dropna()
selic['selic'] = selic['selic'] / (252 * 100)
# Merge dataframes
df = pd.merge(ibov, selic, on="ref_date")
# Plot data
fig, ax = plt.subplots(figsize=(10,5))
ax.plot(df["ref_date"], df["Ibov_return"], label='Ibov')
ax.plot(df["ref_date"], df["selic_return"], label='Selic')
plt.ylabel('Cumulative return (daily)', fontsize=13)
plt.title('Cumulative Returns  Ibov, and Selic (1995-2023)', fontsize=15)
plt.xlabel('Date', fontsize=13)
plt.legend(loc='upper left')
plt.show()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
# Define API key and other parameters
import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
stock = "^BVSP"
start = "1995-01-01"
end = pd.Timestamp.now()
# Get data for IBOV
ibov = yf.download(stock, start=start, end=end)
ibov = ibov.reset_index()
ibov = ibov.sort_values("Date")
ibov = ibov.rename(columns={'Date': 'ref_date', 'Value': 'Ibovespa'})
ibov["return"] = ibov["Adj Close"].pct_change()
ibov['Ibov_return'] = (1 + ibov['return']).cumprod()
ibov = ibov[['ref_date', 'Ibov_return']]
# Get data for Selic
selic = pd.read_excel("files/selic.xls")
selic.columns = ["ref_date", "selic"]
selic['ref_date'] = pd.to_datetime(selic['ref_date'], format="%d/%m/%Y")
selic = selic.dropna()
selic['selic'] = selic['selic'] / (252 * 100)
# Calculate cumulative return for Selic
selic['selic_return'] = (1 + selic['selic']).cumprod()
# Merge dataframes
df = pd.merge(ibov, selic, on="ref_date")
# Plot data
fig, ax = plt.subplots(figsize=(10,5))
ax.plot(df["ref_date"], df["Ibov_return"], label='Ibov')
ax.plot(df["ref_date"], df["selic_return"], label='Selic')
plt.ylabel('Cumulative return (daily)', fontsize=13)
plt.title('Cumulative Returns Ibov and Selic (1995-2023)', fontsize=15)
plt.xlabel('Date', fontsize=13)
plt.legend(loc='upper left')
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
ibov$sd <- roll_sd(ibov$ret_closing_prices,
width = 100,
min_obs = 100 ) * sqrt(250)
p<-ggplot(ibov,aes(ref_date,sd))+
geom_line(color='#2986cc') +
labs(x = "",
y='Standard deviation using 100 daily returns',
title="IBOV (Daily returns since 2010)") +   theme_solarized()
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
import numpy as np
ibov['sd'] = ibov['return'].rolling(window=100, min_periods=100).std()
ibov['sd'] = ibov['sd'] * np.sqrt(250)
plt.close()
fig, ax = plt.subplots(figsize=(20,10))
ax.plot(ibov.index, ibov['sd'], color='#2986cc')
ax.set_xlabel('')
ax.set_ylabel('Standard deviation using 100 daily returns', fontsize=13)
ax.set_title('IBOV (Daily returns since 2010)', fontsize=15)
plt.show()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
ibov['sd'] = ibov['return'].rolling(window=100, min_periods=100).std() * np.sqrt(250)
plt.close()
fig, ax = plt.subplots(figsize=(20, 10))
ax.plot(ibov.index, ibov['sd'], color='#2986cc')
ax.set_xlabel('')
ax.set_ylabel('Standard deviation using 100 daily returns', fontsize=13)
ax.set_title('IBOV (Daily returns since 2010)', fontsize=15)
plt.show()
quit
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stocks <-c('AMER3.SA' )
amer <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
amer<-amer[complete.cases(amer),]
amer$sd <- roll_sd(amer$ret_closing_prices,
width = 100,
min_obs = 100 ) * sqrt(250)
p<-ggplot() +
geom_line(data=amer, aes(amer$ref_date, amer$sd), color='#801e00') +
geom_line(data=ibov, aes(ibov$ref_date, ibov$sd), color='#2986cc') +
labs(x = "",y='Standard deviation using 100 daily returns',
title="IBOV vs AMER3 (Daily returns since 2010)") +   theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stocks <- c('AMER3.SA')
amer <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
amer <- amer[complete.cases(amer),]
amer$sd <- roll_sd(amer$ret_closing_prices,
width = 100,
min_obs = 100) * sqrt(250)
p <- ggplot() +
geom_line(data = amer, aes(x = ref_date, y = sd), color = '#801e00') +
geom_line(data = ibov, aes(x = ref_date, y = sd), color = '#2986cc') +
labs(x = "", y = 'Standard deviation using 100 daily returns',
title = "IBOV vs AMER3 (Daily returns since 2010)") +
theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(ggplot2)
library(plotly)
stocks <- c('AMER3.SA')
amer <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
amer <- amer[complete.cases(amer),]
amer$sd <- roll_sd(amer$ret_closing_prices,
width = 100,
min_obs = 100) * sqrt(250)
p <- ggplot() +
geom_line(data = amer, aes(x = ref_date, y = sd), color = '#801e00') +
geom_line(data = ibov, aes(x = ref_date, y = sd), color = '#2986cc') +
labs(x = "", y = 'Standard deviation using 100 daily returns',
title = "IBOV vs AMER3 (Daily returns since 2010)") +
theme_solarized()
ggplotly(p)
p
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stocks <-c('AMER3.SA' )
amer <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
amer<-amer[complete.cases(amer),]
amer$sd <- roll_sd(amer$ret_closing_prices,
width = 100,
min_obs = 100 ) * sqrt(250)
p<-ggplot() +
geom_line(data=amer, aes(amer$ref_date, amer$sd), color='#801e00') +
geom_line(data=ibov, aes(ibov$ref_date, ibov$sd), color='#2986cc') +
labs(x = "",y='Standard deviation using 100 daily returns',
title="IBOV vs AMER3 (Daily returns since 2010)") +   theme_solarized()
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stocks <-c('AMER3.SA' )
amer <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
amer<-amer[complete.cases(amer),]
amer$sd <- roll_sd(amer$ret_closing_prices,
width = 100,
min_obs = 100 ) * sqrt(250)
p<-ggplot() +
geom_line(data=amer, aes(amer$ref_date, amer$sd), color='#801e00') +
geom_line(data=ibov, aes(ibov$ref_date, ibov$sd), color='#2986cc') +
labs(x = "",y='Standard deviation using 100 daily returns',
title="IBOV vs AMER3 (Daily returns since 2010)") +   theme_solarized()
p
reticulate::repl_python()
quit
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(downloader)
library(dplyr)
library(ggthemes)
library(ggplot2)
library(tidyr)
library(tidyquant)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(yfR)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
stocks = ['WEGE3.SA', '^BVSP']
start = '2010-01-01'
end = pd.Timestamp.now()
data = yf.download(stocks, start=start, end=end)['Close']
returns = data.pct_change().dropna()
plt.close()
fig, ax = plt.subplots(figsize=(20, 10))
fig, ax = plt.subplots()
ax.scatter(returns["^BVSP"], returns["WEGE3.SA"], alpha=0.5, color='black')
m, b = np.polyfit(returns["^BVSP"], returns["WEGE3.SA"], 1)
ax.plot(returns["^BVSP"], m*returns["^BVSP"] + b, color='darkblue')
ax.set_xlabel("Daily returns IBOV")
ax.set_ylabel("Daily returns WEGE3")
ax.set_title("Beta WEGE3.SA")
ax.set_xlim(-0.2, 0.2)
ax.set_ylim(-0.2, 0.2)
plt.show()
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(downloader)
library(dplyr)
library(ggthemes)
library(ggplot2)
library(tidyr)
library(tidyquant)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(yfR)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stocks <-c('BOVA11.SA', '^BVSP')
start <-'2010-01-01'
end   <-Sys.Date()
data <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
data<-data[complete.cases(data),]
stock1 <- subset(data, ticker == stocks[1])
stock2 <- subset(data, ticker == stocks[2])
stock1$price_close2 <- stock1$price_close  / stock1$price_close[1] * 100
stock2$price_close2 <- stock2$price_close  / stock2$price_close[1] * 100
data2 <- rbind(stock1, stock2)
p<- ggplot(data2, aes(ref_date , price_close2, color=ticker))+
geom_line() +
labs(x = "",
y='Closing prices',
title="IBOV against 2 ETFs, Initial price = 100",
subtitle = "Begin 01/01/2010") +   theme_solarized(plot.margin = margin(2,.8,2,.8, "cm"))
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stocks <-c('BOVA11.SA', '^BVSP')
start <-'2010-01-01'
end   <-Sys.Date()
data <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
data<-data[complete.cases(data),]
stock1 <- subset(data, ticker == stocks[1])
stock2 <- subset(data, ticker == stocks[2])
stock1$price_close2 <- stock1$price_close  / stock1$price_close[1] * 100
stock2$price_close2 <- stock2$price_close  / stock2$price_close[1] * 100
data2 <- rbind(stock1, stock2)
p<- ggplot(data2, aes(ref_date , price_close2, color=ticker))+
geom_line() +
labs(x = "",
y='Closing prices',
title="IBOV against 2 ETFs, Initial price = 100",
subtitle = "Begin 01/01/2010") +   theme_solarized( plot.margin = margin(1, 1, 1, 1, "cm"))
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stocks <-c('BOVA11.SA', '^BVSP')
start <-'2010-01-01'
end   <-Sys.Date()
data <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
data<-data[complete.cases(data),]
stock1 <- subset(data, ticker == stocks[1])
stock2 <- subset(data, ticker == stocks[2])
stock1$price_close2 <- stock1$price_close  / stock1$price_close[1] * 100
stock2$price_close2 <- stock2$price_close  / stock2$price_close[1] * 100
data2 <- rbind(stock1, stock2)
p<- ggplot(data2, aes(ref_date , price_close2, color=ticker))+
geom_line() +
labs(x = "",
y='Closing prices',
title="IBOV against 2 ETFs, Initial price = 100",
subtitle = "Begin 01/01/2010") +   theme_solarized(base_size = 12)
ggplotly(p)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
stocks <-c('BOVA11.SA', '^BVSP')
start <-'2010-01-01'
end   <-Sys.Date()
data <- yf_get(tickers = stocks,
first_date = start,
last_date = end)
data<-data[complete.cases(data),]
stock1 <- subset(data, ticker == stocks[1])
stock2 <- subset(data, ticker == stocks[2])
stock1$price_close2 <- stock1$price_close  / stock1$price_close[1] * 100
stock2$price_close2 <- stock2$price_close  / stock2$price_close[1] * 100
data2 <- rbind(stock1, stock2)
p<- ggplot(data2, aes(ref_date , price_close2, color=ticker))+
geom_line() +
labs(x = "",
y='Closing prices',
title="IBOV against 2 ETFs, Initial price = 100",
subtitle = "Begin 01/01/2010") +   theme_solarized()
ggplotly(p)
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| results: false
#| output: true
#| code-fold: true
#| code-line-numbers: true
#| output-location: default
#| code-summary: "Python"
#| collapse: true
#| eval: true
stocks = ['PETR4.SA', '^BVSP']
start = '2010-01-01'
end = pd.Timestamp.now()
data = yf.download(stocks, start=start, end=end)['Close']
returns = data.pct_change().dropna()
plt.close()
fig, ax = plt.subplots(figsize=(20, 10))
fig, ax = plt.subplots()
ax.scatter(returns["^BVSP"], returns["PETR4.SA"], alpha=0.5, color='black')
m, b = np.polyfit(returns["^BVSP"], returns["PETR4.SA"], 1)
ax.plot(returns["^BVSP"], m*returns["^BVSP"] + b, color='darkblue')
ax.set_xlabel("Daily returns IBOV")
ax.set_ylabel("Daily returns PETR4")
ax.set_title("Beta PETR4")
ax.set_xlim(-0.2, 0.2)
ax.set_ylim(-0.2, 0.2)
plt.show()
quit
#| include: false
#| warning: false
api_key <- "kfqxH5NsN8Nhe_U1NADB"
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(downloader)
library(dplyr)
library(ggthemes)
library(ggplot2)
library(tidyr)
library(tidyquant)
library(PerformanceAnalytics)
library(plotly)
library(readxl)
library(roll)
library(yfR)
library(webexercises)
