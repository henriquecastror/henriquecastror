error = function(e) as.character(e))
# nome do arquivo que esperamos (só o basename)
html_name <- fs::path_ext_set(fs::path_file(qmd_path), "html")
# 1) tenta no topo do out_dir
candidate <- fs::path(out_norm, html_name)
if (fs::file_exists(candidate)) return(candidate)
# 2) procura recursivamente (o Quarto pode criar subpastas)
htmls <- fs::dir_ls(out_norm, recurse = TRUE, type = "file", glob = "*.html")
htmls <- htmls[fs::path_file(htmls) == html_name]
if (length(htmls) == 1) return(htmls[[1]])
stop("Falha ao renderizar HTML (verifique quarto e o arquivo): ", qmd_path,
"\nSaída:\n", paste(status, collapse = "\n"))
}
# Cria cópia temporária do QMD (no MESMO diretório) substituindo set.seed(<seed>)
make_local_qmd_with_seed <- function(qmd_path, seed) {
base_dir <- fs::path_dir(qmd_path)
base_nm  <- fs::path_ext_remove(fs::path_file(qmd_path))
tmp_path <- fs::path(base_dir, paste0(base_nm, "_seed", seed, "_.qmd"))
txt <- readLines(qmd_path, warn = FALSE)
pattern <- "\\bset\\.seed\\s*\\([^\\)]*\\)"
replacement <- sprintf("set.seed(%s)", as.character(seed))
txt2 <- if (any(grepl(pattern, txt))) {
gsub(pattern, replacement, txt)
} else {
open_idx <- which(grepl("^```\\{r", txt, perl = TRUE))[1]
if (is.na(open_idx)) c("```{r}", replacement, "```", txt) else append(txt, values = c(replacement), after = open_idx)
}
writeLines(txt2, tmp_path, useBytes = TRUE)
return(tmp_path)
}
# Heurística do tipo
infer_qtype <- function(node) {
type <- tolower(xml_attr(node, "type") %||% "")
id   <- tolower(xml_attr(node, "id") %||% "")
if (type == "number") return("num")
if (grepl("_num_", id)) return("num")
if (grepl("_tf_",  id)) return("tf")
if (type %in% c("radio","checkbox")) return("mcq")
if (grepl("_mcq_", id)) return("mcq")
corr <- tolower(xml_attr(node, "data-correct-answer") %||% "")
if (corr %in% c("t","f","true","false")) return("tf")
return("long")
}
# Extrai gabaritos do HTML
extract_items_from_html <- function(html_path) {
doc <- read_html(html_path)
items <- list()
# MCQ via <form data-correct-answer="A">
forms_with_correct <- xml_find_all(doc, ".//form[@data-correct-answer]")
if (length(forms_with_correct) > 0) {
for (frm in forms_with_correct) {
corr_letter <- toupper(trimws(xml_attr(frm, "data-correct-answer") %||% ""))
radios <- xml_find_all(frm, ".//input[@type='radio']")
if (length(radios) > 0 && nzchar(corr_letter)) {
ids <- toupper(xml_attr(radios, "id")); ids <- ids[!is.na(ids)]
qid <- if (length(ids) > 0) sub("_[A-E]$", "", ids[1]) else (toupper(xml_attr(frm, "id") %||% paste0("MCQ_", digest::digest(corr_letter))))
items[[length(items)+1]] <- list(question_id=qid, qtype="mcq", correct_value=corr_letter, tolerance=NA_real_)
}
}
}
# Qualquer nó com data-correct-answer
nodes <- xml_find_all(doc, ".//*[@data-correct-answer]")
for (nd in nodes) {
if (xml_name(nd) == "form") next
id  <- xml_attr(nd, "id") %||% ""
if (!nzchar(id)) next
qtype <- infer_qtype(nd)
corr  <- xml_attr(nd, "data-correct-answer") %||% ""
tol   <- xml_attr(nd, "data-tolerance") %||% NA
tol   <- suppressWarnings(as.numeric(tol))
if (qtype == "mcq") {
val <- xml_attr(nd, "value") %||% ""
if (nzchar(val)) {
corr <- toupper(val)
} else {
m <- regexpr("([A-E])$", toupper(id))
if (m > 0) corr <- toupper(substr(id, m, m+attr(m, "match.length")-1))
}
}
items[[length(items)+1]] <- list(
question_id   = id,
qtype         = qtype,
correct_value = as.character(corr),
tolerance     = if (!is.na(tol)) tol else NA_real_
)
}
if (length(items) == 0) {
return(data.frame(question_id=character(), qtype=character(), correct_value=character(), tolerance=double(), stringsAsFactors = FALSE))
}
df <- do.call(rbind.data.frame, lapply(items, as.data.frame))
df <- df[!duplicated(df$question_id), ]
rownames(df) <- NULL
df$qtype <- tolower(df$qtype)
df$correct_value <- as.character(df$correct_value)
df$tolerance[!(df$qtype %in% c("num"))] <- NA_real_
df
}
# (Opcional) hash do QMD
version_hash_of_qmd <- function(qmd_path) {
txt <- readLines(qmd_path, warn = FALSE)
norm <- gsub("\\s+", " ", trimws(txt))
digest(paste(norm, collapse = "\n"), algo = "sha256")
}
# POST para /exercises/answer-key
post_answer_key <- function(payload, endpoint = ENDPOINT_ANSWER_KEY, token = admin_token) {
hdrs <- list(
"content-type" = "application/json",
"x-admin-token" = token
)
req <- httr2::request(endpoint) |>
httr2::req_method("POST") |>
httr2::req_headers(.headers = hdrs) |>
httr2::req_body_json(payload)
resp <- httr2::req_perform(req)
list(
status = httr2::resp_status(resp),
body   = tryCatch(httr2::resp_body_string(resp), error = function(e) "")
)
}
points_for <- function(qtype) {
if (!USE_POINTS_LOCAL) return(NULL)
POINTS_BY_TYPE[[tolower(qtype)]] %||% NULL
}
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")  # aspas
tok <- trimws(Sys.getenv("ADMIN_TOKEN", ""))
nchar(tok)                                   # deve imprimir o tamanho (>0)
httr2::request("https://course-chat.hcmrtns.workers.dev/admin/ping") |>
httr2::req_headers(.headers = list("x-admin-token" = tok)) |>
httr2::req_perform() |>
httr2::resp_body_string()
tok <- trimws(Sys.getenv("ADMIN_TOKEN", ""))
nchar(tok)  # deve imprimir 12
httr2::request("https://course-chat.hcmrtns.workers.dev/admin/ping") |>
httr2::req_headers("Authorization" = paste("Bearer", tok)) |>
httr2::req_perform() |>
httr2::resp_body_string()
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
# 2) Templates (catálogo)
tpl_items  <- build_templates_payload(FILES, FILE_META)
cat("\n=== Publicando templates ===\n")
cat(post_templates(tpl_items), "\n")
# 3) Instances (html + chaves por parte)
inst_items <- build_instances_payload(FILES, FILE_META)
cat("\n=== Publicando instances ===\n")
cat(substr(post_instances(inst_items), 1, 800), "\n")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
httr2::request(ENDPOINT_TEMPL) |>
httr2::req_method("POST") |>
httr2::req_headers(Authorization = paste("Bearer", tok)) |>
httr2::req_body_json(list(items = list(list(question_id="ping_tf", module="modX", qtype="tf")))) |>
httr2::req_perform() |>
httr2::resp_status()
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
# ====== CONFIGURAÇÕES GERAIS ======
library(httr2)
library(jsonlite)
library(yaml)
ACCOUNT_ID  <- Sys.getenv("f4663e60fa6df0aa0e925d92e62e7a8d")
DATABASE_ID <- Sys.getenv("350996ba-6d87-410d-a8f6-323aaa3bfb0d")
API_TOKEN   <- Sys.getenv("i2gk8z2ehKm3IlAc8YG1VCkzG_lbhei6TOE-oZVe")
stopifnot(nzchar(ACCOUNT_ID), nzchar(DATABASE_ID), nzchar(API_TOKEN))
ACCOUNT_ID  <- Sys.setenv("f4663e60fa6df0aa0e925d92e62e7a8d")
Sys.setenv(
CF_ACCOUNT_ID   = "f4663e60fa6df0aa0e925d92e62e7a8d",
D1_DATABASE_ID  = "350996ba-6d87-410d-a8f6-323aaa3bfb0d",
CF_API_TOKEN    = "i2gk8z2ehKm3IlAc8YG1VCkzG_lbhei6TOE-oZVe"
)
stopifnot(nzchar(ACCOUNT_ID), nzchar(DATABASE_ID), nzchar(API_TOKEN))
Sys.setenv(
ACCOUNT_ID   = "f4663e60fa6df0aa0e925d92e62e7a8d",
DATABASE_ID  = "350996ba-6d87-410d-a8f6-323aaa3bfb0d",
API_TOKEN    = "i2gk8z2ehKm3IlAc8YG1VCkzG_lbhei6TOE-oZVe"
)
stopifnot(nzchar(ACCOUNT_ID), nzchar(DATABASE_ID), nzchar(API_TOKEN))
ACCOUNT_ID  <-"f4663e60fa6df0aa0e925d92e62e7a8d"
DATABASE_ID <-"350996ba-6d87-410d-a8f6-323aaa3bfb0d"
API_TOKEN   <-"i2gk8z2ehKm3IlAc8YG1VCkzG_lbhei6TOE-oZVe"
stopifnot(nzchar(ACCOUNT_ID), nzchar(DATABASE_ID), nzchar(API_TOKEN))
# Endpoint oficial D1 (Query: retorna objetos; Raw: retorna arrays)
D1_QUERY_URL <- sprintf(
"https://api.cloudflare.com/client/v4/accounts/%s/d1/database/%s/query",
ACCOUNT_ID, DATABASE_ID
)
# Lote (carimbo do relatório) e aluno alvo
report_batch  <- "2025-09-15"
student_login <- "bruno_pereira"
student_name  <- "Bruno Pereira"
# Pasta de saída
out_dir <- file.path("reports", report_batch)
if (!dir.exists(out_dir)) dir.create(out_dir, recursive = TRUE, showWarnings = FALSE)
out_pdf <- file.path(out_dir, sprintf("%s.pdf", student_login))
# ====== HELPER: chamar a D1 via REST ======
d1_query <- function(sql, params = list()) {
req <- request(D1_QUERY_URL) |>
req_method("POST") |>
req_headers(
"Authorization" = paste("Bearer", API_TOKEN),
"Content-Type"  = "application/json"
) |>
req_body_json(list(sql = sql, params = params))
resp <- req_perform(req)
stop_for_status(resp)
body <- resp_body_json(resp, simplifyVector = FALSE)
if (isFALSE(body$success)) {
stop("D1 API retornou success=false: ", jsonlite::toJSON(body, auto_unbox = TRUE))
}
# body$result é uma lista de "QueryResult"; para uma única instrução, use result[[1]]
res1 <- body$result[[1]]
if (is.null(res1$success) || isFALSE(res1$success)) {
stop("QueryResult success=false: ", jsonlite::toJSON(res1, auto_unbox = TRUE))
}
# res1$results é uma lista de linhas (cada linha é uma named list com colunas)
return(res1$results)
}
safe_num <- function(x, default = 0) {
if (is.null(x) || length(x) == 0 || is.na(as.numeric(x))) return(default)
as.numeric(x)
}
safe_chr <- function(x, default = "") {
if (is.null(x) || length(x) == 0 || is.na(x)) return(default)
as.character(x)
}
SQL_ATTENDANCE_STUDENT <- "
SELECT
attended                    AS classes_present,
total_classes,
ROUND(100.0 * attended / NULLIF(total_classes,0), 0) AS attendance_rate
FROM v_attendance
WHERE student_id = ?;
"
SQL_ATTENDANCE_AVG <- "
SELECT
ROUND(AVG(attended), 0) AS avg_classes_present,
ROUND(AVG(100.0 * attended / NULLIF(total_classes,0)), 0) AS avg_attendance_rate
FROM v_attendance;
"
SQL_LOGINS_STUDENT <- "
-- Exemplo: agregados de logins por aluno; ajuste para sua view real (ex.: v_logins_summary)
SELECT
COUNT(*) AS total_logins
FROM logins
WHERE student = ?;
"
SQL_LOGINS_TOP_PATHS <- "
-- Top 3 paths do aluno por contagem
SELECT path, COUNT(*) AS hits
FROM logins
WHERE student = ?
GROUP BY path
ORDER BY hits DESC, path ASC
LIMIT 3;
"
SQL_LOGINS_AVG <- "
-- Médias da turma: ajuste se tiver uma view com métricas já calculadas
SELECT
ROUND(AVG(cnt), 0) AS avg_total_logins
FROM (
SELECT student, COUNT(*) AS cnt
FROM logins
GROUP BY student
) t;
"
# Se você já tem uma view “v_scores_summary” por aluno, use-a no lugar destas 3.
SQL_SCORES_STUDENT <- "
SELECT
COALESCE(likes_points, 0)     AS likes_points,
COALESCE(checkouts_points, 0) AS checkouts_points,
COALESCE(exercises_points, 0) AS exercises_points,
COALESCE(likes_points, 0) + COALESCE(checkouts_points, 0) + COALESCE(exercises_points, 0) AS total_points
FROM ranking_score_total
WHERE student_id = ?;
"
SQL_SCORES_AVG <- "
SELECT
ROUND(AVG(likes_points), 0)     AS avg_likes_points,
ROUND(AVG(checkouts_points), 0) AS avg_checkouts_points,
ROUND(AVG(exercises_points), 0) AS avg_exercises_points,
ROUND(AVG(likes_points + checkouts_points + exercises_points), 0) AS avg_total_points
FROM ranking_score_total;
"
SQL_RANKING_TOP10 <- "
SELECT
ROW_NUMBER() OVER (ORDER BY total_points DESC, exercises_points DESC, checkouts_points DESC, likes_points DESC) AS rank,
student_id AS student,
total_points AS points,
checkouts_points AS checkouts,
exercises_points AS exercises,
likes_points AS likes
FROM ranking_score_total
ORDER BY points DESC, exercises DESC, checkouts DESC, likes DESC
LIMIT 10;
"
# Checkouts do aluno para o “snapshot” do lote (edite as datas do período se quiser filtrar)
# Aqui uso tudo “até o fim do dia do lote” no timezone já normalizado na D1 (ou guardado em UTC e convertido).
SQL_CHECKOUTS_STUDENT <- "
SELECT
DATE(timestamp, 'localtime')                                      AS date_label,
strftime('%d/%m/%Y %H:%M', timestamp, 'localtime')               AS ts_br,
slide_id                                                         AS exercise_id,
ticket                                                           AS ticket
FROM checkouts
WHERE student_id = ?
AND timestamp <= DATETIME(?, 'localtime', '23:59:59')
ORDER BY timestamp DESC
LIMIT 5;
"
# Attendance (aluno)
att_row <- d1_query(SQL_ATTENDANCE_STUDENT, params = list(student_login))
avg_attendance_rate  <- if (length(att_avg)) safe_num(att_avg[[1]]$avg_attendance_rate, 0) else 0
# Logins (aluno)
lg_row <- d1_query(SQL_LOGINS_STUDENT, params = list(student_login))
# Top 3 paths do aluno
top_rows <- d1_query(SQL_LOGINS_TOP_PATHS, params = list(student_login))
top1_hits <- safe_num(if (length(top_rows)>=1) top_rows[[1]]$hits else 0, 0)
top2_path <- safe_chr(if (length(top_rows)>=2) top_rows[[2]]$path else "", "/")
top2_hits <- safe_num(if (length(top_rows)>=2) top_rows[[2]]$hits else 0, 0)
top3_path <- safe_chr(if (length(top_rows)>=3) top_rows[[3]]$path else "", "/")
top3_hits <- safe_num(if (length(top_rows)>=3) top_rows[[3]]$hits else 0, 0)
# Logins (média)
lg_avg <- d1_query(SQL_LOGINS_AVG)
logins_per_week      <- 0
logins_per_month     <- 0
avg_logins_per_week  <- 0
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("render_one_from_d1.R")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/render_one_from_d1.R", echo=TRUE)
# ==========================
# Ingestão de exercícios (.qmd) -> D1 (via Worker)
# - Renderiza QMD ao lado do arquivo (sem misturar drives)
# - Usa seed SOMENTE para questões numéricas (e somente se você fornecer)
# - Extrai gabaritos do HTML (id, data-correct-answer, data-tolerance)
# - Publica:
#     (1) /exercises/answer-key  (chave canônica por question_id/part_id)
#     (2) /exercises/templates   (catálogo por question_id)
#     (3) /exercises/instances   (instâncias concretas com html + keys)
# ==========================
# -------- Configurações principais --------
ENDPOINT_ANSWER_KEY <- "https://course-chat.hcmrtns.workers.dev/exercises/answer-key"
ENDPOINT_TEMPL      <- "https://course-chat.hcmrtns.workers.dev/exercises/templates"
ENDPOINT_INST       <- "https://course-chat.hcmrtns.workers.dev/exercises/instances"
ADMIN_TOKEN_ENV     <- "ADMIN_TOKEN"   # defina no seu ambiente
USE_POINTS_LOCAL    <- TRUE            # se FALSE, envia points = NULL (centralize em D1)
POINTS_BY_TYPE      <- list(tf = 1L, mcq = 1L, num = 2L, long = 5L)
# Liste aqui os arquivos do lote (caminhos relativos ao repo)
#FILES <- c( "module4/num/module4_num_q16.qmd")
#FILE_META <- list(  "module4/num/module4_num_q16.qmd"   = list(module = "mod4", slideid = "module4_num_qu3", seeds = NA) )
# ==== LOTE TF: varrer pasta e montar FILES + FILE_META ====
library(fs)
# 1) Liste todos os .qmd dentro da pasta TF
TF_DIR <- "module4/tf"                    # <- ajuste aqui
FILES  <- fs::dir_ls(TF_DIR, recurse = TRUE, glob = "*.qmd")
if (length(FILES) == 0) stop("Nenhum .qmd encontrado em: ", TF_DIR)
# 2) Derivar metadados padrão
# - module: derivado do caminho (ex.: "module4" -> "mod4")
# - slideid: por padrão, usa o nome do arquivo sem extensão (ex.: module4_tf_q101)
FILE_META <- lapply(FILES, function(p) {
mod_folder <- basename(dirname(p))                    # "tf"
mod_root   <- basename(dirname(dirname(p)))           # "module4"
module_tag <- tolower(gsub("^module(\\d+)$", "mod\\1", mod_root))
list(
module  = module_tag,                               # ex.: "mod4"
slideid = path_ext_remove(path_file(p)),            # ex.: "module4_tf_q101"
seeds   = NA                                        # TF não usa seed
)
})
names(FILE_META) <- FILES
# 3) (Opcional) Forçar TODO o lote para o MESMO slideid
# Descomente se quiser agrupar todos os TF em um único slide
# for (nm in names(FILE_META)) FILE_META[[nm]]$slideid <- "module4_tf_slide1"
# Confere acoplamento 1:1 (requisito do run_ingest_batch)
stopifnot(setequal(FILES, names(FILE_META)))
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
getwd()
# POST para /exercises/templates
post_templates <- function(items, endpoint = ENDPOINT_TEMPL, token = admin_token) {
req <- httr2::request(endpoint) |>
httr2::req_method("POST") |>
httr2::req_headers(
"Authorization" = paste("Bearer", trimws(token)),
"Content-Type"  = "application/json"
) |>
httr2::req_body_json(list(items = items)) |>
httr2::req_retry(max_tries = 3, backoff = ~ 0.6 * (2 ^ .x))
resp <- httr2::req_perform(req)
list(
status = httr2::resp_status(resp),
body   = tryCatch(httr2::resp_body_string(resp), error = function(e) ""),
json   = tryCatch(httr2::resp_body_json(resp),  error = function(e) NULL)
)
}
# 2) Templates (catálogo)
tpl_items <- build_templates_payload(FILES, FILE_META)
cat("\n=== Publicando templates ===\n")
res_tpl <- post_templates(tpl_items)
cat("Body:", substr(res_tpl$body, 1, 1000), "\n")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
# 3) Instances (html + chaves por parte)
inst_items <- build_instances_payload(FILES, FILE_META)
cat("\n=== Publicando instances ===\n")
cat(substr(post_instances(inst_items), 1, 800), "\n")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(API_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
> Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
> Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
> Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
cat(substr(post_instances(inst_items), 1, 800), "\n")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
library(httr2)
url <- "https://course-chat.hcmrtns.workers.dev"  # ajuste p/ seu endpoint final
# 1) Teste mínimo de reachability (GET) forçando IPv4 e com timeout maior
req <- request(url) |>
req_options(ipresolve = 1L) |>        # força IPv4 (equivale a curl --ipv4)
req_timeout(30) |>                    # 30s p/ handshake + resposta
req_retry(max_tries = 3, backoff = ~ min(30, 2^.x))  # 3 tentativas com backoff
resp <- req_perform(req)
library(httr2)
request("https://course-chat.hcmrtns.workers.dev/health") |>
req_options(ipresolve = 1L) |>
req_timeout(20) |>
req_perform() |>
resp_body_json()
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
assim: Sys.setenv(API_TOKEN = "18317799tgA!")
Sys.setenv(API_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(API_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
ENDPOINT_ANSWER_KEY <- paste0(ENDPOINT_BASE, "/exercises/answer-key")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
Set.Setenv(ADMIN_TOKEN = "18317799tgA!")
Sys.Setenv(ADMIN_TOKEN = "18317799tgA!")
Sys.setenv(ADMIN_TOKEN = "18317799tgA!")
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
source("D:/Dropbox/Henrique/git/henriquecastror/teaching/financial_strategy/exercises_all.R", echo=TRUE)
