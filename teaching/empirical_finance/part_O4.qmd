---
title: 'Empirical Methods in Finance'
subtitle: 'Practicing 4'
author: 'Henrique C. Martins'
format:
  revealjs: 
    slide-number: true
    theme: simple
    chalkboard: true
    preview-links: auto
    logo: figs/background8.png
    css: logo.css
    footer: '**[**Henrique C. Martins**] [[henrique.martins@fgv.br](mailto:henrique.martins@fgv.br)][Do not use without permission]**  '
    multiplex: true
    scrollable: true 
title-slide-attributes:
    data-background-color: "#b1cafa"
include-after: |
  <script type="text/javascript">
    Reveal.on('ready', event => {
      if (event.indexh === 0) {
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
    });
    Reveal.addEventListener('slidechanged', (event) => {
      if (event.indexh === 0) {
        Reveal.configure({ slideNumber: null });
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
      if (event.indexh === 1) { 
        Reveal.configure({ slideNumber: 'c' });
        document.querySelector("div.has-logo > img.slide-logo").style.display = null;
      }
    });
  </script>

---

```{r setup}
#| include: false
#| warning: false

# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(Statamarkdown)
library(ggplot2)
library(dplyr)
library(ggthemes)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
#reticulate::py_install("linearmodels")
#reticulate::py_install("causalml")

```





# Selection problem {.smaller}

##  {.smaller}


```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
pop <- 5000
sample <- 50
set.seed(1235)
x <- runif(pop, min=0, max=5000)
y <- x/5 + runif(pop, min=0, max=5000)
df <- data.frame(x,y)
```

Imagine that the population contains  **`r pop`** units, from which you can observe only **`r sample`**. 

You want to run a linear model to understand the relationship between x and Y. 








##  {.smaller}

The "true" beta of this relationship is as follows. By "true" I mean the beta you would get should you observe the population (remember though that you don't).

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
summary(lm(df$y ~ df$x))
```

So the "true" beta is `r round(summary(lm(df$y ~ df$x))$coefficients[2,1], 3)`. And the t-stat is `r round(summary(lm(df$y ~ df$x))$coefficients[2,3], 3)` 




##  {.smaller}

Plotting this relationship in a graph, you get:


```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(ggplot2)
library(ggthemes)
ggplot(df) +  geom_point( aes(x=x, y=y), color = "lightblue") +
              geom_smooth(data = df, aes(x=x, y=y) , method = lm) + 
              theme_solarized() + 
              labs(title = paste("Beta is" , round(summary(lm(df$y ~ df$x))$coefficients[2,1], 3) , 
                                 ", Beta t-stat is" , round(summary(lm(df$y ~ df$x))$coefficients[2,3], 3) , 
                                 ", R2 is" , round(summary(lm(df$y ~ df$x))$r.squared , 3) ,
                                 ", Sample Size is" , nrow(df)    ) ) 
```






##  {.smaller}

If you run a linear model using the sample you can observe, you might get this.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(dplyr)
set.seed(1235)
random <- sample_n(df, sample)
reg <- lm(random$y ~ random$x)
sum <- summary(reg)
ggplot(df) +  geom_point( aes(x=x, y=y), color = "grey") +
              geom_point( data = random, aes(x=x, y=y) , color = "blue") +
              geom_smooth(data = random, aes(x=x, y=y) , method = lm) + 
              theme_solarized() + 
              labs(title = paste("Beta is" , round(reg$coefficients["random$x"], 3) , 
                                 ", Beta t-stat is" , round(summary(reg)$coefficients[2 , 3]   , 3) , 
                                 ", R2 is" , round(summary(reg)$r.squared , 3) ,
                                 ", Sample Size is" , nrow(random)    ) ) 
```




##  {.smaller}

Or maybe this:

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
set.seed(1242)
random <- sample_n(df, sample)
reg <- lm(random$y ~ random$x)
sum <- summary(reg)
ggplot(df) +  geom_point( aes(x=x, y=y), color = "grey") +
              geom_point( data = random, aes(x=x, y=y) , color = "blue") +
              geom_smooth(data = random, aes(x=x, y=y) , method = lm) + 
              theme_solarized() + 
              labs(title = paste("Beta is" , round(reg$coefficients["random$x"], 3) , 
                                 ", Beta t-stat is" , round(summary(reg)$coefficients[2 , 3]   , 3) , 
                                 ", R2 is" , round(summary(reg)$r.squared , 3) ,
                                 ", Sample Size is" , nrow(random)    ) ) 
```

##  {.smaller}


Or maybe this:

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
set.seed(1243)
random <- sample_n(df, sample)
reg <- lm(random$y ~ random$x)
sum <- summary(reg)
ggplot(df) +  geom_point( aes(x=x, y=y), color = "grey") +
              geom_point( data = random, aes(x=x, y=y) , color = "blue") +
              geom_smooth(data = random, aes(x=x, y=y) , method = lm) + 
              theme_solarized() + 
              labs(title = paste("Beta is" , round(reg$coefficients["random$x"], 3) , 
                                 ", Beta t-stat is" , round(summary(reg)$coefficients[2 , 3]   , 3) , 
                                 ", R2 is" , round(summary(reg)$r.squared , 3) ,
                                 ", Sample Size is" , nrow(random)    ) ) 
```




##  {.smaller}

Or maybe several other estimates.

**So, the takeaway is: always remember that you can only observe a sample of the population. If the sample you observe is biased, you will get biased estimates.**









## **THANK YOU!** {background="#b1cafa"}

::: columns
::: {.column width="60%"}
**QUESTIONS?**

![](figs/qa2.png){width="150%" heigth="150%"}
:::

::: {.column width="40%"}
**Henrique C. Martins**

-   [FGV/EAESP](https://eaesp.fgv.br/en/people/henrique-castro-martins)
-   [Personal Website](https://henriquemartins.net/)
-   [LinkedIn](https://www.linkedin.com/in/henriquecastror/)
-   [Lattes](http://lattes.cnpq.br/6076997472159785)
-   [Scholar](https://scholar.google.com.br/citations?user=7gIfkRMAAAAJ&hl=pt-BR&oi=ao)\
:::
:::

::: footer
:::
