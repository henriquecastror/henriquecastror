---
title: 'Empirical Methods in Finance'
subtitle: 'Practicing 1'
author: 'Henrique C. Martins'
format:
  revealjs: 
    slide-number: true
    theme: simple
    chalkboard: true
    preview-links: auto
    logo: figs/background8.png
    css: logo.css
    footer: '**[**Henrique C. Martins**] [[henrique.martins@fgv.br](mailto:henrique.martins@fgv.br)][Do not use without permission]**  '
    multiplex: true
    scrollable: true 
title-slide-attributes:
    data-background-color: "#b1cafa"
include-after: |
  <script type="text/javascript">
    Reveal.on('ready', event => {
      if (event.indexh === 0) {
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
    });
    Reveal.addEventListener('slidechanged', (event) => {
      if (event.indexh === 0) {
        Reveal.configure({ slideNumber: null });
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
      if (event.indexh === 1) { 
        Reveal.configure({ slideNumber: 'c' });
        document.querySelector("div.has-logo > img.slide-logo").style.display = null;
      }
    });
  </script>

---

```{r setup}
#| include: false
#| warning: false

# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(Statamarkdown)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
#reticulate::py_install("linearmodels")
#reticulate::py_install("causalml")

```








# Basic Statistics {.smaller}

## Basic stats {.smaller }

The following are simple examples of how to compute basic statistics using R. We will start importing the data. Let's use the free dataset `iris`, available in R.


```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
iris <- iris 
```


First, explore the dataset.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
str(iris) 
```


- We have 5 variables: Sepal.Length, Sepal.Width, Petal.Length, Petal.Width e Species. The first four are numeric while the last is a string with three groups: setosa, versicolor, and virginica. The dataset contains 150 observations







## Basic stats {.smaller }

Let's take a look at the first 10 observations in the dataset.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
head(iris, 10) 
```


## Basic stats {.smaller }


Now, let's take a look at the first 5 observations of each species.


```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
by(iris,iris["Species"],head,n=5)
```







## Mean and Median {.smaller }

Now, let's find the means and the medians of the four numeric variables. The most intuitive way is as follows.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
mean(iris$Sepal.Length)
mean(iris$Sepal.Width)
mean(iris$Petal.Length)
mean(iris$Petal.Width)
 
median(iris$Sepal.Length)
median(iris$Sepal.Width)
median(iris$Petal.Length)
median(iris$Petal.Width)
```



## Mean and Median {.smaller }

But this is the easiest way.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
summary(iris)
```



## Mean and Median {.smaller }

See that in the code above you also have the number of observations of each species. If you wanted to know how many observations you have in the dataset, you could use the following line. This might be important in the future.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
length(iris$Species)
```


## Mean and Median {.smaller }

If you want the same thing by group, do as follows:

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
by(iris, iris$Species, summary)
```







## Minimum and maximum  {.smaller }

The function `summary`already gives you the minimum and maximum of all variables. But sometimes you need to find only these values. You could use the following lines.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
min(iris$Sepal.Length)
max(iris$Sepal.Length)
```
      
You could also find the range of values to find the extreme values of a variable.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
range(iris$Sepal.Length)
```





## Minimum and maximum  {.smaller }

If you need the distance between the extreme values, you can use:

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
max(iris$Sepal.Length) - min(iris$Sepal.Length)
```












## Standard-deviation and Variance {.smaller }

Finally, you can also compute the Standard-deviation and Variance of one variable as follows.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
sd(iris$Sepal.Length)
var(iris$Sepal.Length) 
```

If you want the standard deviation of all variables:

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
lapply(iris[, 1:4], sd)
```










 
## Correlation {.smaller }

The following lines will show you a correlation table. First, you need to create a new dataframe with only the numeric variables. This is an extremely important table to your academic paper.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(dplyr)
iris_num <- select(iris,-Species)
cor(iris_num)
```







## Frequence table {.smaller }

Here is another important table you might use in your paper: the frequency of observations by group.

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
table(iris$Species)
```





# T-test {.smaller }

## T-test {.smaller }

Let's create now a t-test of the difference in means. For that, we will use another dataset: `mtcars`. The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles. You can find the description of the variables [here](https://www.rdocumentation.org/packages/datasets/versions/3.6.2/topics/mtcars).

You will find that there is one variable that is binary: either the cars are automatic (1) or are manual (0).

When you have binary variables, it is always a good idea to test if the means of the variables are different between the two groups of the binary variable.

This is a big thing and you will use a lot in your academic research. In fact, in many articles, the authors explore and compare two groups. So, be ready to create such an analysis.  







## T-test {.smaller }

First, import the new dataset. Then, repeat the first steps and inspect this dataset (I will not inspect the dataset here, but you should inspect as a way to practice it). 

```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
mtcars <- mtcars
```



## T-test {.smaller }

Then, use the binary variable to check if the other variables have similar means. In the following case, I am comparing the average of `mpg` (miles per gas) of an automatic with a manual car.


```{r}
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
t.test(mpg ~ am, data=mtcars)
```

- We see that the average in the automatic car is around 17.1 while the average of manual cars is 24.3.

- These averages are statistically different, since the t-stat is high (-3.76) and p-value is low (0.001).

- So, we can learn that automatic cars consume more gas than manual cars.

- This type of test will be too important in your article.





## üôã‚Äç‚ôÇÔ∏è **Any Questions?**{ .smaller  background="#fdf6e3"}

::: columns
::: {.column width="50%"}
### Thank You!

![](figs/qa2.png){width="110%" style="box-shadow: none;"}

:::

::: {.column width="50%"}
<div style="text-align:right;">
  <img src="figs/avatar.jpg" width="120px" style="border-radius:50%; box-shadow:0 4px 12px rgba(0,0,0,.25);" />
</div>

### **Henrique C. Martins**

- üåê [FGV/EAESP](https://eaesp.fgv.br/en/people/henrique-castro-martins)  
- üíº [LinkedIn](https://www.linkedin.com/in/henriquecastror/)  
- üß† [Google Scholar](https://scholar.google.com.br/citations?user=7gIfkRMAAAAJ&hl=pt-BR&oi=ao)  
- üìÑ [Lattes CV](http://lattes.cnpq.br/6076997472159785)  
- üè† [Personal Website](https://henriquemartins.net/)  
:::
:::

