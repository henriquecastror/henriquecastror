plt.scatter(pop['iq'], pop['luck'], label="General Population", alpha=0.5)
plt.scatter(successful['iq'], successful['luck'], color='red', label="Successful Subpopulation", alpha=0.7)
plt.title("The general population & successful subpopulation")
plt.xlabel("IQ")
plt.ylabel("Luck")
plt.legend()
plt.show()
quit
#| include: false
#| warning: false
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(Statamarkdown)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
# Load necessary packages
library(tidyverse)
library(haven)
library(knitr)
library(kableExtra)
read_data <- function(df)
{
full_path <- paste("https://github.com/scunning1975/mixtape/raw/master/",df, sep = "")
df <- read_dta(full_path)
return(df)
}
training_example <- read_data("training_example.dta") %>% slice(1:20)
summary(training_example$age_treat)
summary(training_example$age_control)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
# Load necessary packages
library(tidyverse)
library(haven)
library(knitr)
library(kableExtra)
read_data <- function(df)
{
full_path <- paste("https://github.com/scunning1975/mixtape/raw/master/",df, sep = "")
df <- read_dta(full_path)
return(df)
}
training_example <- read_data("training_example.dta") %>% slice(1:20)
summary(training_example$age_treat)
summary(training_example$age_control)
View(training_example)
View(training_example)
library(tidyverse)
library(haven)
library(knitr)
library(kableExtra)
read_data <- function(df)
{
full_path <- paste("https://github.com/scunning1975/mixtape/raw/master/",df, sep = "")
df <- read_dta(full_path)
return(df)
}
training_example <- read_data("training_example.dta") %>% slice(1:20)
summary(training_example$age_treat)
install.packages("kableExtra")
detach("package:kableExtra", unload = TRUE)
library(kableExtra)
detach("package:kableExtra", unload = TRUE)
library(kableExtra)
read_data <- function(df)
{
full_path <- paste("https://github.com/scunning1975/mixtape/raw/master/",df, sep = "")
df <- read_dta(full_path)
return(df)
}
training_example <- read_data("training_example.dta") %>% slice(1:20)
summary(training_example$age_treat)
#| include: false
#| warning: false
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(Statamarkdown)
library(ggplot2)
library(dplyr)
library(ggthemes)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
#reticulate::py_install("linearmodels")
#reticulate::py_install("causalml")
#| warning: false
#| echo: true
#| fig-align: center
#| message: false
#| fig-width: 7
#| fig-height: 4
#| collapse: true
ceosal1$salaryhat <- fitted(model)
#summary(ceosal1$salaryhat)
ggplot(ceosal1) +  geom_point( aes(x=roe, y=salary), color = "darkblue") +
geom_point(data=ceosal1, aes(x=roe, y=salaryhat), color = "red") +
geom_smooth(data=ceosal1, aes(x=roe, y=salaryhat), color = "darkgreen") +
theme_solarized()
#| warning: false
#| echo: true
#| fig-align: center
#| message: false
#| fig-width: 7
#| fig-height: 4
library(wooldridge)
data(ceosal1)
reg <- lm(ceosal1$salary ~ ceosal1$roe)
summary(reg)
#| warning: false
#| fig-align: center
#| message: false
#| fig-width: 7
#| fig-height: 4
#| collapse: true
#| echo: true
model <- lm(ceosal1$salary ~ ceosal1$roe)
summary(model)
summary(model)$coefficients[1,3]
summary(model)$coefficients[1,5]
summary(model)$coefficients[1,2]
summary(model)$coefficients[1,3]
summary(model)$coefficients[3,1]
#| include: false
#| warning: false
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(Statamarkdown)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
#reticulate::py_install("linearmodels")
#reticulate::py_install("causalml")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
# Load the necessary library
library(foreign)
data <- read.dta("files/kielmc.dta")
data$y81_nearinc <- data$y81 * data$nearinc
model1 <- lm(rprice ~ y81 + nearinc + y81_nearinc, data = data)
model2 <- lm(rprice ~ y81 + nearinc + y81_nearinc + age + agesq, data = data)
model3 <- lm(rprice ~ y81 + nearinc + y81_nearinc + age + agesq + intst + land + area + rooms + baths, data = data)
summary(model3)
View(data)
#| include: false
#| warning: false
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(Statamarkdown)
library(ggplot2)
library(dplyr)
library(ggthemes)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
#reticulate::py_install("linearmodels")
#reticulate::py_install("causalml")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(ggplot2)
library(ggthemes)
library(readxl)
library(jtools) # for nice tables of models - https://cran.r-project.org/web/packages/jtools/vignettes/summ.html#summ
data <- read_excel("files/data.xls")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(dplyr)
data <- data %>% group_by(id )                %>% dplyr::mutate(id_firm = cur_group_id())
data <- data %>% group_by(setor_economatica)  %>% dplyr::mutate(id_ind = cur_group_id())
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(plm)
data <- pdata.frame(data, index=c("id_firm","year"))
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
attach(data)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library('plyr')
count(country)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
count(year)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
count(setor_economatica)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
data$lev1 <- Debt / (Debt + Equity.market.value)
data$lev2 <- Debt / Total.Assets
data$wc_ta <- wc  / Total.Assets
data$cash_ta <- cash / Total.Assets
data$div_ta <- Dividends / Total.Assets
data$fcf_ta <- Free.cash.flow / Total.Assets
data$tang_ta <- tangible / Total.Assets
data$roa2 <- roa / 100
library(SciViews)
data$size1  <- ln(Total.Assets)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(vtable)
sumtable(data, vars = c('lev1' , 'lev2' , 'wc_ta', 'cash_ta',  'size1'  , 'fcf_ta' , 'div_ta', 'roa' , 'tang_ta'))
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(DescTools)
data$w_lev1     <- Winsorize(data$lev1   , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_lev2     <- Winsorize(data$lev2   , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_wc_ta    <- Winsorize(data$wc_ta  , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_cash_ta  <- Winsorize(data$cash_ta, probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_size1    <- Winsorize(data$size1  , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_fcf_ta   <- Winsorize(data$fcf_ta , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_div_ta   <- Winsorize(data$div_ta , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_roa      <- Winsorize(data$roa    , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_tang_ta  <- Winsorize(data$tang_ta, probs = c(0.01, 0.99) , na.rm = TRUE)
View(data)
#| include: false
#| warning: false
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(Statamarkdown)
library(ggplot2)
library(dplyr)
library(ggthemes)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
#reticulate::py_install("linearmodels")
#reticulate::py_install("causalml")
fd2 <- plm(w_lev1 ~ lag(w_size1) + w_fcf_ta + w_roa + w_tang_ta + w_cash_ta + w_div_ta + factor(year) , data = data, model="fd")
library(plm)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(ggplot2)
library(ggthemes)
library(readxl)
library(jtools) # for nice tables of models - https://cran.r-project.org/web/packages/jtools/vignettes/summ.html#summ
data <- read_excel("files/data.xls")
library(dplyr)
data <- data %>% group_by(id )                %>% dplyr::mutate(id_firm = cur_group_id())
data <- data %>% group_by(setor_economatica)  %>% dplyr::mutate(id_ind = cur_group_id())
library(plm)
data <- pdata.frame(data, index=c("id_firm","year"))
attach(data)
# variables
data$lev1 <- Debt / (Debt + Equity.market.value)
data$lev2 <- Debt / Total.Assets
data$wc_ta <- wc  / Total.Assets
data$cash_ta <- cash / Total.Assets
data$div_ta <- Dividends / Total.Assets
data$fcf_ta <- Free.cash.flow / Total.Assets
data$tang_ta <- tangible / Total.Assets
data$roa2 <- roa / 100
library(SciViews)
data$size1  <- ln(Total.Assets)
# winsor
library(DescTools)
data$w_lev1     <- Winsorize(data$lev1   , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_lev2     <- Winsorize(data$lev2   , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_wc_ta    <- Winsorize(data$wc_ta  , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_cash_ta  <- Winsorize(data$cash_ta, probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_size1    <- Winsorize(data$size1  , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_fcf_ta   <- Winsorize(data$fcf_ta , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_div_ta   <- Winsorize(data$div_ta , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_roa      <- Winsorize(data$roa    , probs = c(0.01, 0.99) , na.rm = TRUE)
data$w_tang_ta  <- Winsorize(data$tang_ta, probs = c(0.01, 0.99) , na.rm = TRUE)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
fe <- plm(w_lev1 ~ w_size1 + w_fcf_ta + w_roa + w_tang_ta + w_cash_ta + w_div_ta + factor(year) , data = data, model="within")
fd <- plm(w_lev1 ~ w_size1 + w_fcf_ta + w_roa + w_tang_ta + w_cash_ta + w_div_ta + factor(year) , data = data, model="fd")
fd2 <- plm(w_lev1 ~ lag(w_size1) + w_fcf_ta + w_roa + w_tang_ta + w_cash_ta + w_div_ta + factor(year) , data = data, model="fd")
export_summs(fe, fd, coefs = c("w_size1","w_div_ta","w_fcf_ta","w_roa","w_tang_ta","w_cash_ta")  , digits = 3, model.names = c("FE","FD"))
summary(fd2)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: false
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(wooldridge)
data('wage1')
wage1$fem_mar <- wage1$female * wage1$married
wage<- lm(lwage ~ female + married + fem_mar + educ + exper + expersq + tenure + tenursq , data = wage1)
export_summs(wage, coefs = c("(Intercept)", "female","married","fem_mar") , digits = 3)
summary(wage)
library(jtools)
data('wage1')
wage1$fem_mar <- wage1$female * wage1$married
wage<- lm(lwage ~ female + married + fem_mar + educ + exper + expersq + tenure + tenursq , data = wage1)
export_summs(wage, coefs = c("(Intercept)", "female","married","fem_mar") , digits = 3)
summary(wage)
data('mroz')
library(wooldridge)
data('mroz')
lpm <- lm(inlf ~ nwifeinc + educ + exper + expersq + age + kidslt6 + kidsge6  , data = mroz)
logit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age + kidslt6 + kidsge6  , data = mroz,family = binomial)
probit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age + kidslt6 + kidsge6  , data = mroz, family = binomial(link = probit))
export_summs(lpm , logit, probit, coefs = c( "nwifeinc" , "educ" , "exper" , "expersq" , "age"  ,"kidslt6" , "kidsge6", "(Intercept)"), digits = 4 , model.names = c("LPM","Logit","Probit"))
export_summs(lpm , logit, probit, coefs = c( "nwifeinc" , "educ" , "exper" , "expersq" , "age"  ,"kidslt6" , "kidsge6", "(Intercept)"), digits = 4 , model.names = c("LPM","Logit","Probit"))
summary(lpm)
summary(mroz$age)
summary(mroz$hours)
summary(lpm)
#| include: false
#| warning: false
library(quantmod)
library(tidyverse)
# Download data
getSymbols("AAPL", from="2023-01-01", to="2023-12-31")
getSymbols("^GSPC", from="2023-01-01", to="2023-12-31")
ret_aapl <- dailyReturn(AAPL)
ret_mkt  <- dailyReturn(GSPC)
# Define event and estimation window
event_date <- "2023-07-15"
pre_event <- index(ret_aapl) < event_date
# Estimate Market Model
fit <- lm(ret_aapl[pre_event] ~ ret_mkt[pre_event])
summary(fit)
# Predict expected returns
pred <- predict(fit, newdata=data.frame(ret_mkt=ret_mkt))
# Abnormal and cumulative abnormal returns
ar <- ret_aapl - pred
car <- cumsum(ar)
plot(car, main="Cumulative Abnormal Returns (CAR)")
abline(v=which(index(car)==event_date), col="red", lwd=2)
#| include: false
#| warning: false
library(quantmod)
library(tidyverse)
# Baixar dados
getSymbols("AAPL", from="2023-01-01", to="2023-12-31")
getSymbols("^GSPC", from="2023-01-01", to="2023-12-31")
# Normalizar preços (início=100)
aapl_norm <- Cl(AAPL) / as.numeric(Cl(AAPL)[1]) * 100
sp500_norm <- Cl(GSPC) / as.numeric(Cl(GSPC)[1]) * 100
# Plot
plot(aapl_norm, main="Apple vs S&P 500 (Normalized Prices, 2023)", col="darkgreen", lwd=2)
lines(sp500_norm, col="gray", lwd=2, lty=2)
legend("topleft", legend=c("Apple (AAPL)", "S&P 500"),
col=c("darkgreen", "gray"), lwd=2, lty=c(1,2))
# Baixar dados
getSymbols("AAPL", from="2023-01-01", to="2023-12-31")
getSymbols("^GSPC", from="2023-01-01", to="2023-12-31")
# Plot
plot(AAPL, main="Apple vs S&P 500 (Normalized Prices, 2023)", col="darkgreen", lwd=2)
lines(GSPC, col="gray", lwd=2, lty=2)
legend("topleft", legend=c("Apple (AAPL)", "S&P 500"),
col=c("darkgreen", "gray"), lwd=2, lty=c(1,2))
# Baixar dados
getSymbols("AAPL", from="2023-01-01", to="2023-12-31")
getSymbols("^GSPC", from="2023-01-01", to="2023-12-31")
# Plot
plot(AAPL, main="Apple vs S&P 500", col="darkgreen", lwd=2)
lines(GSPC, col="gray", lwd=2, lty=2)
legend("topleft", legend=c("Apple (AAPL)", "S&P 500"),
col=c("darkgreen", "gray"), lwd=2, lty=c(1,2))
View(AAPL)
View(AAPL)
# Baixar dados
getSymbols("AAPL", from="2023-01-01", to="2023-12-31")
getSymbols("^GSPC", from="2023-01-01", to="2023-12-31")
# Selecionar preços ajustados
aapl <- Ad(AAPL)
sp500 <- Ad(GSPC)
# Plot com preços reais
plot(aapl, main="Apple vs S&P 500 (Prices, 2023)",
col="darkgreen", lwd=2, ylab="Adjusted Price (USD)")
lines(sp500, col="gray", lwd=2, lty=2)
legend("topleft", legend=c("Apple (AAPL)", "S&P 500"),
col=c("darkgreen", "gray"), lwd=2, lty=c(1,2))
# Baixar dados
getSymbols("AAPL", from="2023-01-01", to="2023-12-31")
getSymbols("^GSPC", from="2023-01-01", to="2023-12-31")
aapl <- Ad(AAPL)
sp500 <- Ad(GSPC)
# Plot com dois eixos y
plot(aapl, col="darkgreen", lwd=2, ylim=range(aapl),
main="Apple vs S&P 500 (Prices, 2023)",
ylab="Apple Adjusted Price (USD)", xlab="Date")
par(new=TRUE)  # habilita novo gráfico na mesma área
plot(sp500, col="gray", lwd=2, lty=2, axes=FALSE, xlab="", ylab="", ylim=range(sp500))
axis(side=4, col.axis="gray")  # eixo da direita
mtext("S&P 500 Index", side=4, line=3, col="gray")
legend("topleft", legend=c("Apple (AAPL)", "S&P 500"),
col=c("darkgreen", "gray"), lwd=2, lty=c(1,2))
ar_window <- ar[window]                  # anormal returns na janela [-5,+5]
CAR_total <- last(car)
ar_window <- ar[window]                  # anormal returns na janela [-5,+5]
