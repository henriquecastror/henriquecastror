#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
plot(luck ~ iq, main = "The general population")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
plot(luck ~ iq, main = "The general population")
ggplot(pop, aes(x = luck, y = luckiq)) +
geom_point(aes(colour = factor(-group)), size = 1) +
geom_smooth(method=lm, se=FALSE, fullrange=FALSE)+
labs( y = "", x="", title = "The general population")+
xlim(-3,4)+ ylim(-3,4)+
theme(plot.title = element_text(color="black", size=30, face="bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.y = element_text(face="bold", color="black", size = 18),
axis.text.x = element_text(face="bold", color="black", size = 18),
legend.position = "none")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
plot(luck ~ iq, main = "The general population")
ggplot(pop, aes(x = luck, y = luckiq)) +
geom_point(aes(colour = factor(-group)), size = 1) +
geom_smooth(method=lm, se=FALSE, fullrange=FALSE)+
labs( y = "", x="", title = "The general population")+
xlim(-3,4)+ ylim(-3,4)+
theme(plot.title = element_text(color="black", size=30, face="bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.y = element_text(face="bold", color="black", size = 18),
axis.text.x = element_text(face="bold", color="black", size = 18),
legend.position = "none")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
plot(luck ~ iq, main = "The general population")
ggplot(pop, aes(x = luck, y = iq)) +
geom_point(aes(colour = factor(-group)), size = 1) +
geom_smooth(method=lm, se=FALSE, fullrange=FALSE)+
labs( y = "", x="", title = "The general population")+
xlim(-3,4)+ ylim(-3,4)+
theme(plot.title = element_text(color="black", size=30, face="bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.y = element_text(face="bold", color="black", size = 18),
axis.text.x = element_text(face="bold", color="black", size = 18),
legend.position = "none")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
plot(luck ~ iq, main = "The general population")
ggplot(pop, aes(x = luck, y = iq)) +
labs( y = "", x="", title = "The general population")+
xlim(-3,4)+ ylim(-3,4)+
theme(plot.title = element_text(color="black", size=30, face="bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.y = element_text(face="bold", color="black", size = 18),
axis.text.x = element_text(face="bold", color="black", size = 18),
legend.position = "none")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
ggplot(pop, aes(x = luck, y = iq)) +
labs( y = "", x="", title = "The general population")
View(pop)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
ggplot(pop, aes(luck ~ iq)) +
labs( y = "", x="", title = "The general population")+
xlim(-3,4)+ ylim(-3,4)+
theme(plot.title = element_text(color="black", size=30, face="bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.y = element_text(face="bold", color="black", size = 18),
axis.text.x = element_text(face="bold", color="black", size = 18),
legend.position = "none")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
ggplot(pop, aes(x = iq, y = luck)) +
labs(y = "", x = "", title = "The general population") +
xlim(70, 130) + ylim(70, 130) +  # Adjusted limits based on the data
theme(plot.title = element_text(color = "black", size = 30, face = "bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.y = element_text(face = "bold", color = "black", size = 18),
axis.text.x = element_text(fa
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
ggplot(pop, aes(x = iq, y = luck)) +
labs(y = "", x = "", title = "The general population") +
xlim(70, 130) + ylim(70, 130) +  # Adjusted limits based on the data
theme(plot.title = element_text(color = "black", size = 30, face = "bold"),
panel.background = element_rect(fill = "grey95", colour = "grey95"),
axis.text.y = element_text(face = "bold", color = "black", size = 18),
axis.text.x = element_text(face = "bold", color = "black", size = 18),
legend.position = "none")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
ggplot(pop, aes(x = iq, y = luck)) +
labs(y = "", x = "", title = "The general population")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
ggplot(pop, aes(x = iq, y = luck)) +
labs(y = "", x = "", title = "The general population")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
ggplot(pop, aes(x = iq, y = luck)) +
labs(title = "The general population")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
ggplot(pop, aes(x = iq, y = luck)) +
geom_point() +
labs(title = "The general population")
pop$comb <- pop$luck + pop$iq
View(pop)
successfull <- pop[pop$comb > 240, ]
View(successfull)
ggplot(successfull, aes(x = iq, y = luck)) +
geom_point() +
labs(title = "The general population")
successfull <- pop[pop$comb > 200, ]
ggplot(successfull, aes(x = iq, y = luck)) +
geom_point() +
labs(title = "The general population")
successfull <- pop[pop$comb > 220, ]
ggplot(successfull, aes(x = iq, y = luck)) +
geom_point() +
labs(title = "The general population")
successfull <- pop[pop$comb > 240, ]
ggplot(successfull, aes(x = iq, y = luck)) +
geom_point() +
labs(title = "The general population")
ggplot(successfull, aes(x = iq, y = luck)) +
geom_point() +geom_line() +
labs(title = "The general population")
ggplot(successfull, aes(x = iq, y = luck)) +
geom_point() +  geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Regression line
labs(title = "The general population")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
pop$comb <- pop$luck + pop$iq
successfull <- pop[pop$comb > 240, ]
ggplot() +
geom_point(data = pop, aes(x = IQ, y = hotness)) +  # Plotting the general population
geom_point(data = celebs, aes(x = IQ, y = hotness), color = "red") +  # Plotting the celebrities in red
geom_abline(intercept = 235, slope = -1, color = "blue") +  # Adding the blue regression line
labs(title = "The general population & Celebrities") +
theme_minimal()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
library(data.table)
library(ggplot2)
set.seed(100)
luck <- rnorm(1000, 100, 15)
iq   <- rnorm(1000, 100, 15)
pop <- data.frame(luck, iq)
pop$comb <- pop$luck + pop$iq
successfull <- pop[pop$comb > 240, ]
ggplot() +
geom_point(data = pop, aes(x = iq, y = luck)) +
geom_point(data = successfull, aes(x = iq, y = luck), color = "red") +
geom_abline(intercept = 235, slope = -1, color = "blue") +
labs(title = "The general population & successful subpopulation") +
theme_minimal()
reticulate::repl_python()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output: true
#| output-location: default
#| code-fold: true
#| code-line-numbers: true
#| eval: true
#| code-summary: "Python"
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
np.random.seed(100)
luck = np.random.normal(100, 15, 1000)
iq = np.random.normal(100, 15, 1000)
pop = pd.DataFrame({'luck': luck, 'iq': iq})
pop['comb'] = pop['luck'] + pop['iq']
successful = pop[pop['comb'] > 240]
sns.set(style="whitegrid")  # Minimalistic theme similar to theme_minimal in ggplot2
plt.figure(figsize=(8, 6))
plt.scatter(pop['iq'], pop['luck'], label="General Population", alpha=0.5)
plt.scatter(successful['iq'], successful['luck'], color='red', label="Successful Subpopulation", alpha=0.7)
x_vals = np.array(plt.gca().get_xlim())
y_vals = 235 + -1 * x_vals
plt.plot(x_vals, y_vals, color="blue", label="y = -x + 235")
plt.title("The general population & successful subpopulation")
plt.xlabel("IQ")
plt.ylabel("Luck")
plt.legend()
plt.show()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output: true
#| output-location: default
#| code-fold: true
#| code-line-numbers: true
#| eval: true
#| code-summary: "Python"
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
np.random.seed(100)
luck = np.random.normal(100, 15, 1000)
iq = np.random.normal(100, 15, 1000)
pop = pd.DataFrame({'luck': luck, 'iq': iq})
pop['comb'] = pop['luck'] + pop['iq']
successful = pop[pop['comb'] > 240]
sns.set(style="whitegrid")  # Minimalistic theme similar to theme_minimal in ggplot2
plt.figure(figsize=(8, 6))
plt.scatter(pop['iq'], pop['luck'], label="General Population", alpha=0.5)
plt.scatter(successful['iq'], successful['luck'], color='red', label="Successful Subpopulation", alpha=0.7)
plt.plot(x_vals, y_vals, color="blue", label="y = -x + 235")
plt.title("The general population & successful subpopulation")
plt.xlabel("IQ")
plt.ylabel("Luck")
plt.legend()
plt.show()
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output: true
#| output-location: default
#| code-fold: true
#| code-line-numbers: true
#| eval: true
#| code-summary: "Python"
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
np.random.seed(100)
luck = np.random.normal(100, 15, 1000)
iq = np.random.normal(100, 15, 1000)
pop = pd.DataFrame({'luck': luck, 'iq': iq})
pop['comb'] = pop['luck'] + pop['iq']
successful = pop[pop['comb'] > 240]
sns.set(style="whitegrid")  # Minimalistic theme similar to theme_minimal in ggplot2
plt.figure(figsize=(8, 6))
plt.scatter(pop['iq'], pop['luck'], label="General Population", alpha=0.5)
plt.scatter(successful['iq'], successful['luck'], color='red', label="Successful Subpopulation", alpha=0.7)
plt.title("The general population & successful subpopulation")
plt.xlabel("IQ")
plt.ylabel("Luck")
plt.legend()
plt.show()
quit
#| include: false
#| warning: false
# library(reticulate)
# use_python("C:/Users/hcmrt/AppData/Local/Programs/Python/Python310/python.exe")
library(reticulate)
library(Statamarkdown)
#reticulate::py_install("matplotlib")
#reticulate::py_install("seaborn")
#reticulate::py_install("pyfinance")
#reticulate::py_install("xlrd")
#reticulate::py_install("quandl")
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
# Load necessary packages
library(tidyverse)
library(haven)
library(knitr)
library(kableExtra)
read_data <- function(df)
{
full_path <- paste("https://github.com/scunning1975/mixtape/raw/master/",df, sep = "")
df <- read_dta(full_path)
return(df)
}
training_example <- read_data("training_example.dta") %>% slice(1:20)
summary(training_example$age_treat)
summary(training_example$age_control)
#| warning: false
#| message: false
#| fig-align: center
#| echo: true
#| output-location: default
#| code-fold: true
#| code-summary: "R"
#| code-line-numbers: true
#| eval: true
# Load necessary packages
library(tidyverse)
library(haven)
library(knitr)
library(kableExtra)
read_data <- function(df)
{
full_path <- paste("https://github.com/scunning1975/mixtape/raw/master/",df, sep = "")
df <- read_dta(full_path)
return(df)
}
training_example <- read_data("training_example.dta") %>% slice(1:20)
summary(training_example$age_treat)
summary(training_example$age_control)
View(training_example)
View(training_example)
library(tidyverse)
library(haven)
library(knitr)
library(kableExtra)
read_data <- function(df)
{
full_path <- paste("https://github.com/scunning1975/mixtape/raw/master/",df, sep = "")
df <- read_dta(full_path)
return(df)
}
training_example <- read_data("training_example.dta") %>% slice(1:20)
summary(training_example$age_treat)
install.packages("kableExtra")
detach("package:kableExtra", unload = TRUE)
library(kableExtra)
detach("package:kableExtra", unload = TRUE)
library(kableExtra)
read_data <- function(df)
{
full_path <- paste("https://github.com/scunning1975/mixtape/raw/master/",df, sep = "")
df <- read_dta(full_path)
return(df)
}
training_example <- read_data("training_example.dta") %>% slice(1:20)
summary(training_example$age_treat)
